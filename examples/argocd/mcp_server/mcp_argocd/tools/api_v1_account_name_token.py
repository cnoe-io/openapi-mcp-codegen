# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/account/{name}/token operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def account_service__create_token(path_name: str) -> Dict[str, Any]:
    '''
    Creates a new authentication token for the specified account.

    Args:
        path_name (str): The name or identifier of the account for which to create the token.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the created token details or error information.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      post:
        summary: Create a new authentication token for an account.
        operationId: account_service__create_token
        parameters:
          - name: path_name
            in: path
            required: true
            description: The name or identifier of the account.
            schema:
              type: string
        responses:
          '200':
            description: Token created successfully.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
                      description: The newly created authentication token.
                    expires_at:
                      type: string
                      format: date-time
                      description: Expiration time of the token.
          '400':
            description: Invalid request parameters.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          '404':
            description: Account not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
    '''
    logger.debug("Making POST request to /api/v1/account/{name}/token")

    params = {}
    data = {}

    success, response = await make_api_request(
        f"/api/v1/account/{path_name}/token", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response