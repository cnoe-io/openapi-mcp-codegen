
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/account/can-i/{resource}/{action}/{subresource} operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def accountservice_cani(path_resource: str, path_action: str, path_subresource: str) -> Dict[str, Any]:
    '''
    Checks if the current account has permission to perform a specified action on a resource.

    Args:
        path_resource (str): The resource to check permissions for.
        path_action (str): The action to check permission for (e.g., 'get', 'update', 'delete').
        path_subresource (str): The subresource to check permissions for.

    Returns:
        Dict[str, Any]: The JSON response from the API call indicating whether the action is permitted.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Check if the current account has permission to perform an action.
        operationId: accountservice_cani
        parameters:
          - name: path_resource
            in: path
            required: true
            schema:
              type: string
            description: The resource to check permissions for.
          - name: path_action
            in: path
            required: true
            schema:
              type: string
            description: The action to check permission for (e.g., 'get', 'update', 'delete').
          - name: path_subresource
            in: path
            required: true
            schema:
              type: string
            description: The subresource to check permissions for.
        responses:
          '200':
            description: Permission check result.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    allowed:
                      type: boolean
                      description: Whether the action is permitted.
                    reason:
                      type: string
                      description: Reason for the permission result.
          '400':
            description: Invalid request parameters.
          '401':
            description: Unauthorized access.
          '500':
            description: Internal server error.
    '''
    logger.debug("Making GET request to /api/v1/account/can-i/{resource}/{action}/{subresource}")
    params = {}
    data = None
    data = {}
    if not data:
        data = None
    success, response = await make_api_request(
        f"/api/v1/account/can-i/{path_resource}/{path_action}/{path_subresource}",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
