# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/clusters/{id.value} operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def cluster_service__get(
    path_id_value: str, param_server: str = None, param_name: str = None, param_id_type: str = None
) -> Dict[str, Any]:
    """
    Get returns a cluster by server address

    OpenAPI Description:


    Args:
    path_id_value (str): OpenAPI parameter corresponding to 'path_id_value'.
    param_server (str = None): OpenAPI parameter corresponding to 'param_server'.
    param_name (str = None): OpenAPI parameter corresponding to 'param_name'.
    param_id_type (str = None): OpenAPI parameter corresponding to 'param_id_type'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /api/v1/clusters/{id.value}")

    params = {}
    data = {}

    params["server"] = param_server
    params["name"] = param_name
    params["id_type"] = param_id_type

    success, response = await make_api_request(
        f"/api/v1/clusters/{path_id_value}", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def cluster_service__update(
    path_id_value: str, param_updatedFields: str = None, param_id_type: str = None
) -> Dict[str, Any]:
    """
    Update updates a cluster

    OpenAPI Description:


    Args:
    path_id_value (str): OpenAPI parameter corresponding to 'path_id_value'.
    param_updatedFields (str = None): OpenAPI parameter corresponding to 'param_updatedFields'.
    param_id_type (str = None): OpenAPI parameter corresponding to 'param_id_type'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making PUT request to /api/v1/clusters/{id.value}")

    params = {}
    data = {}

    params["updatedFields"] = param_updatedFields
    params["id_type"] = param_id_type

    success, response = await make_api_request(
        f"/api/v1/clusters/{path_id_value}", method="PUT", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def cluster_service__delete(
    path_id_value: str, param_server: str = None, param_name: str = None, param_id_type: str = None
) -> Dict[str, Any]:
    """
    Delete deletes a cluster

    OpenAPI Description:


    Args:
    path_id_value (str): OpenAPI parameter corresponding to 'path_id_value'.
    param_server (str = None): OpenAPI parameter corresponding to 'param_server'.
    param_name (str = None): OpenAPI parameter corresponding to 'param_name'.
    param_id_type (str = None): OpenAPI parameter corresponding to 'param_id_type'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making DELETE request to /api/v1/clusters/{id.value}")

    params = {}
    data = {}

    params["server"] = param_server
    params["name"] = param_name
    params["id_type"] = param_id_type

    success, response = await make_api_request(
        f"/api/v1/clusters/{path_id_value}", method="DELETE", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
