# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/clusters/{id.value}/invalidate-cache operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def cluster_service__invalidate_cache(path_id_value: str) -> Dict[str, Any]:
    '''
    InvalidateCache invalidates the cluster cache.

    This function sends a POST request to the specified cluster endpoint to invalidate its cache. It is an asynchronous operation that interacts with the cluster service API.

    Args:
        path_id_value (str): The identifier for the cluster whose cache is to be invalidated. This corresponds to the 'path_id_value' parameter in the OpenAPI specification.

    Returns:
        Dict[str, Any]: A dictionary containing the JSON response from the API call. If the request is successful, the response will contain relevant data. If the request fails, the response will contain an error message.

    Raises:
        Exception: If the API request fails or returns an error, an exception is raised with details about the failure.
    '''
    logger.debug("Making POST request to /api/v1/clusters/{id.value}/invalidate-cache")

    params = {}
    data = {}

    success, response = await make_api_request(
        f"/api/v1/clusters/{path_id_value}/invalidate-cache", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response