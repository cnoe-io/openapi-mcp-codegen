# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/stream/applications operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__watch(
    param_name: str = None,
    param_refresh: str = None,
    param_projects: str = None,
    param_resourceVersion: str = None,
    param_selector: str = None,
    param_repo: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
) -> Dict[str, Any]:
    '''
    Watch returns a stream of application change events.

    Args:
        param_name (str, optional): The application's name. Defaults to None.
        param_refresh (str, optional): Forces application reconciliation if set to 'hard'. Defaults to None.
        param_projects (str, optional): The project names to restrict returned list applications. Defaults to None.
        param_resourceVersion (str, optional): When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to None.
        param_selector (str, optional): The selector to restrict returned list to applications only with matched labels. Defaults to None.
        param_repo (str, optional): The repoURL to restrict returned list applications. Defaults to None.
        param_appNamespace (str, optional): The application's namespace. Defaults to None.
        param_project (str, optional): The project names to restrict returned list applications (legacy name for backwards-compatibility). Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/stream/applications")

    params = {}
    data = {}

    params["name"] = param_name
    params["refresh"] = param_refresh
    params["projects"] = param_projects
    params["resourceVersion"] = param_resourceVersion
    params["selector"] = param_selector
    params["repo"] = param_repo
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project

    success, response = await make_api_request("/api/v1/stream/applications", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response