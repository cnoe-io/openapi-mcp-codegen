
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/manifestswithfiles operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def applicationservice_getmanifestswithfiles(body: str) -> Dict[str, Any]:
    '''
    Generate application manifests using provided files.

    Args:
        body (str): The request body containing file data used to generate application manifests.

    Returns:
        Dict[str, Any]: The generated application manifests or an error message.

    Raises:
        Exception: If the API request fails or returns an unexpected response.

    OpenAPI Specification:
      post:
        summary: Generate application manifests using provided files.
        operationId: applicationservice_getmanifestswithfiles
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: string
              example: |
                {
                  "files": [
                    {"name": "deployment.yaml", "content": "<YAML content>"},
                    {"name": "service.yaml", "content": "<YAML content>"}
                  ]
                }
        responses:
          '200':
            description: Successfully generated application manifests.
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties: true
          '400':
            description: Invalid request body or file data.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
    '''
    logger.debug("Making POST request to /api/v1/applications/manifestswithfiles")
    params = {}
    data = None

    # Add parameters to request
    if body is not None:
        data = body

    success, response = await make_api_request(
        "/api/v1/applications/manifestswithfiles",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
