# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applicationsets operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_set_service__list(
    param_projects: str = None, param_selector: str = None, param_appsetNamespace: str = None
) -> Dict[str, Any]:
    """
    List returns list of applicationset

    OpenAPI Description:


    Args:
    param_projects (str = None): OpenAPI parameter corresponding to 'param_projects'.
    param_selector (str = None): OpenAPI parameter corresponding to 'param_selector'.
    param_appsetNamespace (str = None): OpenAPI parameter corresponding to 'param_appsetNamespace'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /api/v1/applicationsets")

    params = {}
    data = {}

    params["projects"] = param_projects
    params["selector"] = param_selector
    params["appsetNamespace"] = param_appsetNamespace

    success, response = await make_api_request("/api/v1/applicationsets", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def application_set_service__create(param_upsert: str = None, param_dryRun: str = None) -> Dict[str, Any]:
    """
    Create creates an applicationset

    OpenAPI Description:


    Args:
    param_upsert (str = None): OpenAPI parameter corresponding to 'param_upsert'.
    param_dryRun (str = None): OpenAPI parameter corresponding to 'param_dryRun'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to /api/v1/applicationsets")

    params = {}
    data = {}

    params["upsert"] = param_upsert
    params["dryRun"] = param_dryRun

    success, response = await make_api_request("/api/v1/applicationsets", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
