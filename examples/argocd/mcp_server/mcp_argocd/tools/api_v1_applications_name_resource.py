# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name}/resource operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__get_resource(
    path_name: str,
    param_namespace: str = None,
    param_resourceName: str = None,
    param_version: str = None,
    param_group: str = None,
    param_kind: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
) -> Dict[str, Any]:
    '''
    GetResource returns a single application resource.

    Args:
        path_name (str): The name of the application path.
        param_namespace (str, optional): The namespace of the resource. Defaults to None.
        param_resourceName (str, optional): The name of the resource. Defaults to None.
        param_version (str, optional): The version of the resource. Defaults to None.
        param_group (str, optional): The group of the resource. Defaults to None.
        param_kind (str, optional): The kind of the resource. Defaults to None.
        param_appNamespace (str, optional): The application namespace. Defaults to None.
        param_project (str, optional): The project associated with the resource. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the application resource details.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/applications/{name}/resource")

    params = {}
    data = {}

    params["namespace"] = param_namespace
    params["resourceName"] = param_resourceName
    params["version"] = param_version
    params["group"] = param_group
    params["kind"] = param_kind
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/resource", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def application_service__patch_resource(
    path_name: str,
    param_namespace: str = None,
    param_resourceName: str = None,
    param_version: str = None,
    param_group: str = None,
    param_kind: str = None,
    param_patchType: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
) -> Dict[str, Any]:
    '''
    Patch a single application resource using the specified parameters.

    Args:
        path_name (str): The name of the application path.
        param_namespace (str, optional): The namespace of the resource. Defaults to None.
        param_resourceName (str, optional): The name of the resource to patch. Defaults to None.
        param_version (str, optional): The version of the resource. Defaults to None.
        param_group (str, optional): The group of the resource. Defaults to None.
        param_kind (str, optional): The kind of the resource. Defaults to None.
        param_patchType (str, optional): The type of patch to apply. Defaults to None.
        param_appNamespace (str, optional): The application namespace. Defaults to None.
        param_project (str, optional): The project associated with the application. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the patch operation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/applications/{name}/resource")

    params = {}
    data = {}

    params["namespace"] = param_namespace
    params["resourceName"] = param_resourceName
    params["version"] = param_version
    params["group"] = param_group
    params["kind"] = param_kind
    params["patchType"] = param_patchType
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/resource", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def application_service__delete_resource(
    path_name: str,
    param_namespace: str = None,
    param_resourceName: str = None,
    param_version: str = None,
    param_group: str = None,
    param_kind: str = None,
    param_force: str = None,
    param_orphan: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
) -> Dict[str, Any]:
    '''
    Delete a single application resource.

    Args:
        path_name (str): The name of the application path.
        param_namespace (str, optional): The namespace of the resource. Defaults to None.
        param_resourceName (str, optional): The name of the resource to delete. Defaults to None.
        param_version (str, optional): The version of the resource. Defaults to None.
        param_group (str, optional): The group of the resource. Defaults to None.
        param_kind (str, optional): The kind of the resource. Defaults to None.
        param_force (str, optional): Whether to force delete the resource. Defaults to None.
        param_orphan (str, optional): Whether to orphan the resource. Defaults to None.
        param_appNamespace (str, optional): The application namespace. Defaults to None.
        param_project (str, optional): The project associated with the resource. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making DELETE request to /api/v1/applications/{name}/resource")

    params = {}
    data = {}

    params["namespace"] = param_namespace
    params["resourceName"] = param_resourceName
    params["version"] = param_version
    params["group"] = param_group
    params["kind"] = param_kind
    params["force"] = param_force
    params["orphan"] = param_orphan
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/resource", method="DELETE", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response