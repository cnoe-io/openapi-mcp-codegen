
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/repocreds operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def repocredsservice_listrepositorycredentials(url: str = None) -> Dict[str, Any]:
    '''
    Retrieves a list of all configured repository credential sets.

    Args:
        url (str, optional): The base URL of the API endpoint. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing the list of repository credential sets or an error message.

    Raises:
        Exception: If the API request fails or an unexpected error occurs.

    OpenAPI Specification:
      get:
        summary: List all configured repository credential sets
        operationId: listRepositoryCredentials
        tags:
          - RepositoryCredentials
        parameters: []
        responses:
          '200':
            description: A list of repository credential sets.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    items:
                      type: array
                      items:
                        type: object
          '400':
            description: Bad request.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
    '''
    logger.debug("Making GET request to /api/v1/repocreds")
    params = {}
    data = None

    success, response = await make_api_request(
        "/api/v1/repocreds",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def repocredsservice_createrepositorycredentials(body: str, upsert: str = None) -> Dict[str, Any]:
    '''
    Creates a new repository credential set.

    Args:
        body (str): The JSON-encoded repository credentials to create.
        upsert (str, optional): If set, allows updating existing credentials. Defaults to None.

    Returns:
        Dict[str, Any]: The response from the API, including the created credential set or error information.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      post:
        summary: Create a new repository credential set
        operationId: repocredsservice_createrepositorycredentials
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                description: Repository credentials payload
        parameters:
          - in: query
            name: upsert
            schema:
              type: string
            required: false
            description: If set, allows updating existing credentials
        responses:
          '200':
            description: Repository credentials created successfully
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid request payload
          '500':
            description: Internal server error
    '''
    logger.debug("Making POST request to /api/v1/repocreds")
    params = {}
    data = None

    # Add parameters to request
    if body is not None:
        data = body

    success, response = await make_api_request(
        "/api/v1/repocreds",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
