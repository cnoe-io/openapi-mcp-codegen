# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/repositories operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def repository_service__list_repositories(
    param_repo: str = None, param_forceRefresh: str = None, param_appProject: str = None
) -> Dict[str, Any]:
    '''
    ListRepositories gets a list of all configured repositories.

    Args:
        param_repo (str, optional): The repository identifier to filter the list. Defaults to None.
        param_forceRefresh (str, optional): A flag to force refresh the repository list. Defaults to None.
        param_appProject (str, optional): The application project identifier to filter the repositories. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the list of repositories.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/repositories")

    params = {}
    data = {}

    params["repo"] = param_repo
    params["forceRefresh"] = param_forceRefresh
    params["appProject"] = param_appProject

    success, response = await make_api_request("/api/v1/repositories", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def repository_service__create_repository(
    param_upsert: str = None, param_credsOnly: str = None
) -> Dict[str, Any]:
    '''
    Create a new repository configuration.

    Args:
        param_upsert (str, optional): Parameter to specify if the repository should be upserted. Defaults to None.
        param_credsOnly (str, optional): Parameter to specify if only credentials should be updated. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing details of the created repository configuration.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/repositories")

    params = {}
    data = {}

    params["upsert"] = param_upsert
    params["credsOnly"] = param_credsOnly

    success, response = await make_api_request("/api/v1/repositories", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response