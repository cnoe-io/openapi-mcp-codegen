# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name}/revisions/{revision}/metadata operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request


def assemble_nested_body(flat_body: Dict[str, Any]) -> Dict[str, Any]:
    '''
    Convert a flat dictionary with underscore-separated keys into a nested dictionary.

    Args:
        flat_body (Dict[str, Any]): A dictionary where keys are underscore-separated strings representing nested paths.

    Returns:
        Dict[str, Any]: A nested dictionary constructed from the flat dictionary.

    Raises:
        ValueError: If the input dictionary contains keys that cannot be split into valid parts.
    '''
    nested = {}
    for key, value in flat_body.items():
        parts = key.split("_")
        d = nested
        for part in parts[:-1]:
            d = d.setdefault(part, {})
        d[parts[-1]] = value
    return nested


# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__revision_metadata(
    path_name: str,
    path_revision: str,
    param_appNamespace: str = None,
    param_project: str = None,
    param_sourceIndex: int = None,
    param_versionId: int = None,
) -> Dict[str, Any]:
    '''
    Get the meta-data (author, date, tags, message) for a specific revision of the application.

    Args:
        path_name (str): The application's name.
        path_revision (str): The revision of the application.
        param_appNamespace (str, optional): The application's namespace. Defaults to None.
        param_project (str, optional): OpenAPI parameter corresponding to 'param_project'. Defaults to None.
        param_sourceIndex (int, optional): Source index for multi-source applications. Defaults to None.
        param_versionId (int, optional): Version ID from historical data for multi-source applications. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the metadata of the specified application revision.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/applications/{name}/revisions/{revision}/metadata")

    params = {}
    data = {}

    params["appNamespace"] = (
        str(param_appNamespace).lower() if isinstance(param_appNamespace, bool) else param_appNamespace
    )

    params["project"] = str(param_project).lower() if isinstance(param_project, bool) else param_project

    params["sourceIndex"] = str(param_sourceIndex).lower() if isinstance(param_sourceIndex, bool) else param_sourceIndex

    params["versionId"] = str(param_versionId).lower() if isinstance(param_versionId, bool) else param_versionId

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/revisions/{path_revision}/metadata", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response