# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name}/revisions/{revision}/metadata operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__revision_metadata(
    path_name: str,
    path_revision: str,
    param_appNamespace: str = None,
    param_project: str = None,
    param_sourceIndex: str = None,
    param_versionId: str = None,
) -> Dict[str, Any]:
    '''
    Get the meta-data (author, date, tags, message) for a specific revision of the application.

    Args:
        path_name (str): The name of the application path.
        path_revision (str): The specific revision identifier of the application.
        param_appNamespace (str, optional): The namespace of the application. Defaults to None.
        param_project (str, optional): The project associated with the application. Defaults to None.
        param_sourceIndex (str, optional): The source index of the application. Defaults to None.
        param_versionId (str, optional): The version ID of the application. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing the metadata of the specified application revision, including author, date, tags, and message.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/applications/{name}/revisions/{revision}/metadata")

    params = {}
    data = {}

    params["appNamespace"] = param_appNamespace
    params["project"] = param_project
    params["sourceIndex"] = param_sourceIndex
    params["versionId"] = param_versionId

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/revisions/{path_revision}/metadata", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response