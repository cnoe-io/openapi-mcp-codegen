# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name}/manifests operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__get_manifests(
    path_name: str,
    param_revision: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
    param_sourcePositions: str = None,
    param_revisions: str = None,
) -> Dict[str, Any]:
    '''
    Get application manifests.

    Args:
        path_name (str): The path name of the application.
        param_revision (str, optional): The specific revision of the application. Defaults to None.
        param_appNamespace (str, optional): The namespace of the application. Defaults to None.
        param_project (str, optional): The project to which the application belongs. Defaults to None.
        param_sourcePositions (str, optional): The source positions for the application. Defaults to None.
        param_revisions (str, optional): The revisions of the application. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the application manifests.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/applications/{name}/manifests")

    params = {}
    data = {}

    params["revision"] = param_revision
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project
    params["sourcePositions"] = param_sourcePositions
    params["revisions"] = param_revisions

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/manifests", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response