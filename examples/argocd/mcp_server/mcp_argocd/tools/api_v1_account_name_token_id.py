# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/account/{name}/token/{id} operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def account_service__delete_token(path_name: str, path_id: str) -> Dict[str, Any]:
    '''
    Deletes a token associated with a specific account.

    Args:
        path_name (str): The name of the account for which the token will be deleted.
        path_id (str): The unique identifier of the token to delete.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the delete operation.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      delete:
        summary: Delete a token for an account
        operationId: account_service__delete_token
        tags:
          - Account
        parameters:
          - name: path_name
            in: path
            required: true
            schema:
              type: string
            description: The name of the account.
          - name: path_id
            in: path
            required: true
            schema:
              type: string
            description: The unique identifier of the token to delete.
        responses:
          '200':
            description: Token deleted successfully.
            content:
              application/json:
                schema:
                  type: object
          '404':
            description: Token or account not found.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid request parameters.
            content:
              application/json:
                schema:
                  type: object
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
    '''
    logger.debug("Making DELETE request to /api/v1/account/{name}/token/{id}")

    params = {}
    data = {}

    success, response = await make_api_request(
        f"/api/v1/account/{path_name}/token/{path_id}", method="DELETE", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response