
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/account/{name}/token/{id} operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def accountservice_deletetoken(path_name: str, path_id: str) -> Dict[str, Any]:
    '''
    Deletes a token associated with the specified account.

    Args:
        path_name (str): The name of the account. This is a path parameter in the API endpoint.
        path_id (str): The ID of the token to delete. This is a path parameter in the API endpoint.

    Returns:
        Dict[str, Any]: The JSON response from the API call. On success, typically an empty object or a confirmation message. On failure, contains an 'error' key with details.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      delete:
        summary: Delete a token for an account.
        operationId: accountservice_deletetoken
        tags:
          - AccountService
        parameters:
          - name: name
            in: path
            required: true
            schema:
              type: string
            description: The name of the account.
          - name: id
            in: path
            required: true
            schema:
              type: string
            description: The ID of the token to delete.
        responses:
          '200':
            description: Token deleted successfully.
            content:
              application/json:
                schema:
                  type: object
          '404':
            description: Token or account not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          '400':
            description: Invalid request parameters.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
        security:
          - ApiKeyAuth: []
    '''
    logger.debug("Making DELETE request to /api/v1/account/{name}/token/{id}")
    params = {}
    data = None
    

    

    


    
    data = {}

    

    

    if not data:
        data = None
    success, response = await make_api_request(
        f"/api/v1/account/{path_name}/token/{path_id}",
        method="DELETE",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
