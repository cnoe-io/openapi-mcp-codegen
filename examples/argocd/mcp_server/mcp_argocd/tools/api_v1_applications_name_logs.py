# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name}/logs operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__pod_logs2(
    path_name: str,
    param_namespace: str = None,
    param_podName: str = None,
    param_container: str = None,
    param_sinceSeconds: str = None,
    param_sinceTime_seconds: str = None,
    param_sinceTime_nanos: str = None,
    param_tailLines: str = None,
    param_follow: str = None,
    param_untilTime: str = None,
    param_filter: str = None,
    param_kind: str = None,
    param_group: str = None,
    param_resourceName: str = None,
    param_previous: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
    param_matchCase: str = None,
) -> Dict[str, Any]:
    """
    PodLogs returns stream of log entries for the specified pod. Pod

    OpenAPI Description:


    Args:
    path_name (str): OpenAPI parameter corresponding to 'path_name'.
    param_namespace (str = None): OpenAPI parameter corresponding to 'param_namespace'.
    param_podName (str = None): OpenAPI parameter corresponding to 'param_podName'.
    param_container (str = None): OpenAPI parameter corresponding to 'param_container'.
    param_sinceSeconds (str = None): OpenAPI parameter corresponding to 'param_sinceSeconds'.
    param_sinceTime_seconds (str = None): OpenAPI parameter corresponding to 'param_sinceTime_seconds'.
    param_sinceTime_nanos (str = None): OpenAPI parameter corresponding to 'param_sinceTime_nanos'.
    param_tailLines (str = None): OpenAPI parameter corresponding to 'param_tailLines'.
    param_follow (str = None): OpenAPI parameter corresponding to 'param_follow'.
    param_untilTime (str = None): OpenAPI parameter corresponding to 'param_untilTime'.
    param_filter (str = None): OpenAPI parameter corresponding to 'param_filter'.
    param_kind (str = None): OpenAPI parameter corresponding to 'param_kind'.
    param_group (str = None): OpenAPI parameter corresponding to 'param_group'.
    param_resourceName (str = None): OpenAPI parameter corresponding to 'param_resourceName'.
    param_previous (str = None): OpenAPI parameter corresponding to 'param_previous'.
    param_appNamespace (str = None): OpenAPI parameter corresponding to 'param_appNamespace'.
    param_project (str = None): OpenAPI parameter corresponding to 'param_project'.
    param_matchCase (str = None): OpenAPI parameter corresponding to 'param_matchCase'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /api/v1/applications/{name}/logs")

    params = {}
    data = {}

    params["namespace"] = param_namespace
    params["podName"] = param_podName
    params["container"] = param_container
    params["sinceSeconds"] = param_sinceSeconds
    params["sinceTime_seconds"] = param_sinceTime_seconds
    params["sinceTime_nanos"] = param_sinceTime_nanos
    params["tailLines"] = param_tailLines
    params["follow"] = param_follow
    params["untilTime"] = param_untilTime
    params["filter"] = param_filter
    params["kind"] = param_kind
    params["group"] = param_group
    params["resourceName"] = param_resourceName
    params["previous"] = param_previous
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project
    params["matchCase"] = param_matchCase

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/logs", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
