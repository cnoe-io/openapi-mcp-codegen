# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name}/logs operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__pod_logs2(
    path_name: str,
    param_namespace: str = None,
    param_podName: str = None,
    param_container: str = None,
    param_sinceSeconds: str = None,
    param_sinceTime_seconds: str = None,
    param_sinceTime_nanos: str = None,
    param_tailLines: str = None,
    param_follow: str = None,
    param_untilTime: str = None,
    param_filter: str = None,
    param_kind: str = None,
    param_group: str = None,
    param_resourceName: str = None,
    param_previous: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
    param_matchCase: str = None,
) -> Dict[str, Any]:
    '''
    PodLogs returns a stream of log entries for the specified pod.

    Args:
        path_name (str): The name of the application path.
        param_namespace (str, optional): The namespace of the pod. Defaults to None.
        param_podName (str, optional): The name of the pod. Defaults to None.
        param_container (str, optional): The name of the container within the pod. Defaults to None.
        param_sinceSeconds (str, optional): The time in seconds since the logs were generated. Defaults to None.
        param_sinceTime_seconds (str, optional): Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. Defaults to None.
        param_sinceTime_nanos (str, optional): Non-negative fractions of a second at nanosecond resolution. Must be from 0 to 999,999,999 inclusive. Defaults to None.
        param_tailLines (str, optional): The number of lines from the end of the logs to show. Defaults to None.
        param_follow (str, optional): Whether to stream the logs continuously. Defaults to None.
        param_untilTime (str, optional): The time until which logs should be fetched. Defaults to None.
        param_filter (str, optional): A filter to apply to the logs. Defaults to None.
        param_kind (str, optional): The kind of resource. Defaults to None.
        param_group (str, optional): The group of the resource. Defaults to None.
        param_resourceName (str, optional): The name of the resource. Defaults to None.
        param_previous (str, optional): Whether to fetch logs from the previous instance of the pod. Defaults to None.
        param_appNamespace (str, optional): The namespace of the application. Defaults to None.
        param_project (str, optional): The project associated with the application. Defaults to None.
        param_matchCase (str, optional): Whether to match the case in the filter. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the log entries.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/applications/{name}/logs")

    params = {}
    data = {}

    params["namespace"] = param_namespace
    params["podName"] = param_podName
    params["container"] = param_container
    params["sinceSeconds"] = param_sinceSeconds
    params["sinceTime_seconds"] = param_sinceTime_seconds
    params["sinceTime_nanos"] = param_sinceTime_nanos
    params["tailLines"] = param_tailLines
    params["follow"] = param_follow
    params["untilTime"] = param_untilTime
    params["filter"] = param_filter
    params["kind"] = param_kind
    params["group"] = param_group
    params["resourceName"] = param_resourceName
    params["previous"] = param_previous
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project
    params["matchCase"] = param_matchCase

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/logs", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response