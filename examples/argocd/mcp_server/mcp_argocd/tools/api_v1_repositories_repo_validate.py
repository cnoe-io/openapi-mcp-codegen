# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/repositories/{repo}/validate operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def repository_service__validate_access(
    path_repo: str,
    param_username: str = None,
    param_password: str = None,
    param_sshPrivateKey: str = None,
    param_insecure: str = None,
    param_tlsClientCertData: str = None,
    param_tlsClientCertKey: str = None,
    param_type: str = None,
    param_name: str = None,
    param_enableOci: str = None,
    param_githubAppPrivateKey: str = None,
    param_githubAppID: str = None,
    param_githubAppInstallationID: str = None,
    param_githubAppEnterpriseBaseUrl: str = None,
    param_proxy: str = None,
    param_project: str = None,
    param_gcpServiceAccountKey: str = None,
    param_forceHttpBasicAuth: str = None,
    param_useAzureWorkloadIdentity: str = None,
    param_bearerToken: str = None,
) -> Dict[str, Any]:
    '''
    Validate access to a repository with the given parameters.

    Args:
        path_repo (str): The path to the repository to validate access for.
        param_username (str, optional): The username for authentication. Defaults to None.
        param_password (str, optional): The password for authentication. Defaults to None.
        param_sshPrivateKey (str, optional): The SSH private key for authentication. Defaults to None.
        param_insecure (str, optional): Flag to allow insecure connections. Defaults to None.
        param_tlsClientCertData (str, optional): TLS client certificate data. Defaults to None.
        param_tlsClientCertKey (str, optional): TLS client certificate key. Defaults to None.
        param_type (str, optional): The type of repository. Defaults to None.
        param_name (str, optional): The name of the repository. Defaults to None.
        param_enableOci (str, optional): Flag to enable OCI support. Defaults to None.
        param_githubAppPrivateKey (str, optional): GitHub App private key. Defaults to None.
        param_githubAppID (str, optional): GitHub App ID. Defaults to None.
        param_githubAppInstallationID (str, optional): GitHub App installation ID. Defaults to None.
        param_githubAppEnterpriseBaseUrl (str, optional): GitHub App enterprise base URL. Defaults to None.
        param_proxy (str, optional): Proxy settings for the request. Defaults to None.
        param_project (str, optional): The project associated with the repository. Defaults to None.
        param_gcpServiceAccountKey (str, optional): GCP service account key. Defaults to None.
        param_forceHttpBasicAuth (str, optional): Flag to force HTTP basic authentication. Defaults to None.
        param_useAzureWorkloadIdentity (str, optional): Flag to use Azure workload identity. Defaults to None.
        param_bearerToken (str, optional): Bearer token for authentication. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the validation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/repositories/{repo}/validate")

    params = {}
    data = {}

    params["username"] = param_username
    params["password"] = param_password
    params["sshPrivateKey"] = param_sshPrivateKey
    params["insecure"] = param_insecure
    params["tlsClientCertData"] = param_tlsClientCertData
    params["tlsClientCertKey"] = param_tlsClientCertKey
    params["type"] = param_type
    params["name"] = param_name
    params["enableOci"] = param_enableOci
    params["githubAppPrivateKey"] = param_githubAppPrivateKey
    params["githubAppID"] = param_githubAppID
    params["githubAppInstallationID"] = param_githubAppInstallationID
    params["githubAppEnterpriseBaseUrl"] = param_githubAppEnterpriseBaseUrl
    params["proxy"] = param_proxy
    params["project"] = param_project
    params["gcpServiceAccountKey"] = param_gcpServiceAccountKey
    params["forceHttpBasicAuth"] = param_forceHttpBasicAuth
    params["useAzureWorkloadIdentity"] = param_useAzureWorkloadIdentity
    params["bearerToken"] = param_bearerToken

    success, response = await make_api_request(
        f"/api/v1/repositories/{path_repo}/validate", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response