# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name} operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__get(
    path_name: str,
    param_refresh: str = None,
    param_projects: str = None,
    param_resourceVersion: str = None,
    param_selector: str = None,
    param_repo: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
) -> Dict[str, Any]:
    """
    Get returns an application by name

    OpenAPI Description:


    Args:
    path_name (str): OpenAPI parameter corresponding to 'path_name'.
    param_refresh (str = None): OpenAPI parameter corresponding to 'param_refresh'.
    param_projects (str = None): OpenAPI parameter corresponding to 'param_projects'.
    param_resourceVersion (str = None): OpenAPI parameter corresponding to 'param_resourceVersion'.
    param_selector (str = None): OpenAPI parameter corresponding to 'param_selector'.
    param_repo (str = None): OpenAPI parameter corresponding to 'param_repo'.
    param_appNamespace (str = None): OpenAPI parameter corresponding to 'param_appNamespace'.
    param_project (str = None): OpenAPI parameter corresponding to 'param_project'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /api/v1/applications/{name}")

    params = {}
    data = {}

    params["refresh"] = param_refresh
    params["projects"] = param_projects
    params["resourceVersion"] = param_resourceVersion
    params["selector"] = param_selector
    params["repo"] = param_repo
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def application_service__delete(
    path_name: str,
    param_cascade: str = None,
    param_propagationPolicy: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
) -> Dict[str, Any]:
    """
    Delete deletes an application

    OpenAPI Description:


    Args:
    path_name (str): OpenAPI parameter corresponding to 'path_name'.
    param_cascade (str = None): OpenAPI parameter corresponding to 'param_cascade'.
    param_propagationPolicy (str = None): OpenAPI parameter corresponding to 'param_propagationPolicy'.
    param_appNamespace (str = None): OpenAPI parameter corresponding to 'param_appNamespace'.
    param_project (str = None): OpenAPI parameter corresponding to 'param_project'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making DELETE request to /api/v1/applications/{name}")

    params = {}
    data = {}

    params["cascade"] = param_cascade
    params["propagationPolicy"] = param_propagationPolicy
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}", method="DELETE", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
