# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{applicationName}/resource-tree operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__resource_tree(
    path_applicationName: str,
    param_namespace: str = None,
    param_name: str = None,
    param_version: str = None,
    param_group: str = None,
    param_kind: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
) -> Dict[str, Any]:
    '''
    ResourceTree returns the resource tree for a specified application.

    Args:
        path_applicationName (str): The name of the application for which the resource tree is requested.
        param_namespace (str, optional): The namespace of the resources. Defaults to None.
        param_name (str, optional): The name of the resource. Defaults to None.
        param_version (str, optional): The version of the resource. Defaults to None.
        param_group (str, optional): The group of the resource. Defaults to None.
        param_kind (str, optional): The kind of the resource. Defaults to None.
        param_appNamespace (str, optional): The application namespace. Defaults to None.
        param_project (str, optional): The project associated with the application. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing the JSON response from the API call, representing the resource tree.

    Raises:
        Exception: If the API request fails or returns an error, an exception is raised with the error details.
    '''
    logger.debug("Making GET request to /api/v1/applications/{applicationName}/resource-tree")

    params = {}
    data = {}

    params["namespace"] = param_namespace
    params["name"] = param_name
    params["version"] = param_version
    params["group"] = param_group
    params["kind"] = param_kind
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project

    success, response = await make_api_request(
        f"/api/v1/applications/{path_applicationName}/resource-tree", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response