# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/session operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def session_service__create() -> Dict[str, Any]:
    '''
    Create a new JWT for authentication and set a cookie if using HTTP.

    This function makes an asynchronous POST request to the /api/v1/session endpoint
    to create a new session. It returns the JSON response from the API call, which
    includes the JWT token for authentication purposes. If the request fails, it
    raises an exception with the error details.

    Args:
        None

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the JWT token
        and any additional session information.

    Raises:
        Exception: If the API request fails or returns an error, an exception is raised
        with the error message.
    '''
    logger.debug("Making POST request to /api/v1/session")

    params = {}
    data = {}

    success, response = await make_api_request("/api/v1/session", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def session_service__delete() -> Dict[str, Any]:
    '''
    Delete an existing JWT cookie if using HTTP.

    This function makes an asynchronous DELETE request to the session endpoint
    to remove an existing JWT cookie. It is typically used in scenarios where
    a user logs out or needs to invalidate their session.

    Args:

    Returns:
        Dict[str, Any]: The JSON response from the API call, which may include
        an error message if the request was unsuccessful.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making DELETE request to /api/v1/session")

    params = {}
    data = {}

    success, response = await make_api_request("/api/v1/session", method="DELETE", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response