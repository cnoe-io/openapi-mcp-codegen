# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/session operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request


def assemble_nested_body(flat_body: Dict[str, Any]) -> Dict[str, Any]:
    '''
    Convert a flat dictionary with underscore-separated keys into a nested dictionary.

    Args:
        flat_body (Dict[str, Any]): A dictionary where keys are underscore-separated strings representing nested paths.

    Returns:
        Dict[str, Any]: A nested dictionary constructed from the flat dictionary.

    Raises:
        ValueError: If the input dictionary contains invalid keys that cannot be split into parts.
    '''
    nested = {}
    for key, value in flat_body.items():
        parts = key.split("_")
        d = nested
        for part in parts[:-1]:
            d = d.setdefault(part, {})
        d[parts[-1]] = value
    return nested


# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def session_service__create(
    body_password: str = None, body_token: str = None, body_username: str = None
) -> Dict[str, Any]:
    '''
    Create a new JWT for authentication and set a cookie if using HTTP.

    Args:
        body_password (str, optional): The password for authentication. Defaults to None.
        body_token (str, optional): The token for authentication. Defaults to None.
        body_username (str, optional): The username for authentication. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, which includes the JWT and any additional information.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/session")

    params = {}
    data = {}

    flat_body = {}
    if body_password is not None:
        flat_body["password"] = body_password
    if body_token is not None:
        flat_body["token"] = body_token
    if body_username is not None:
        flat_body["username"] = body_username
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api/v1/session", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def session_service__delete() -> Dict[str, Any]:
    '''
    Delete an existing JWT cookie if using HTTP.

    This function sends an asynchronous DELETE request to the session endpoint
    to remove an existing JWT cookie. It is typically used in scenarios where
    a user needs to log out or invalidate their session.

    Args:
        None

    Returns:
        Dict[str, Any]: The JSON response from the API call, which may include
        an error message if the request was unsuccessful.

    Raises:
        Exception: If the API request fails or returns an error, an exception
        is raised with details about the failure.
    '''
    logger.debug("Making DELETE request to /api/v1/session")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api/v1/session", method="DELETE", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response