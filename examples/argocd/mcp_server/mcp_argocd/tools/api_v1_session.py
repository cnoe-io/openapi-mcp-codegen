
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/session operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def sessionservice_create(body: str) -> Dict[str, Any]:
    '''
    Create a new JWT for authentication and set a cookie if using HTTP.

    Args:
        body (str): The request payload containing authentication credentials.

    Returns:
        Dict[str, Any]: The response from the authentication service, including the JWT and any relevant session information.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      post:
        summary: Create a new session and issue a JWT.
        description: |
          Authenticates a user and creates a new session. Returns a JWT for authentication and sets a cookie if using HTTP.
        operationId: sessionservice_create
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: string
              example: '{"username": "user", "password": "pass"}'
        responses:
          '200':
            description: Successful authentication and session creation.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
                      description: The issued JWT.
                    expires_in:
                      type: integer
                      description: Expiration time in seconds.
                    user:
                      type: object
                      description: Authenticated user information.
          '400':
            description: Invalid request or authentication failed.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      description: Error message.
    '''
    logger.debug("Making POST request to /api/v1/session")
    params = {}
    data = None

    # Add parameters to request
    if body is not None:
        data = body

    success, response = await make_api_request(
        "/api/v1/session",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def sessionservice_delete() -> Dict[str, Any]:
    '''
    Delete an existing JWT cookie if using HTTP.

    Args:
        None

    Returns:
        Dict[str, Any]: The response from the API indicating success or failure of the session deletion.

    Raises:
        Exception: If the API request fails due to network issues or unexpected errors.

    OpenAPI Specification:
      delete:
        summary: Delete an existing JWT cookie (logout).
        description: Deletes the JWT cookie from the client, effectively logging out the user if using HTTP cookies for authentication.
        operationId: sessionservice_delete
        tags:
          - Session
        responses:
          '200':
            description: Successfully deleted the JWT cookie.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Session deleted successfully."
          '401':
            description: Unauthorized. No valid session found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "Unauthorized"
          '500':
            description: Server error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "Internal server error"
    '''
    logger.debug("Making DELETE request to /api/v1/session")
    params = {}
    data = None

    success, response = await make_api_request(
        "/api/v1/session",
        method="DELETE",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
