
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/gpgkeys operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def gpgkeyservice_list(keyID: str = None) -> Dict[str, Any]:
    """
    List all available repository certificates
    """
    logger.debug("Making GET request to /api/v1/gpgkeys")
    params = {}
    
    if keyID is not None:
      params["keyID"] = keyID
    
    data = None

    success, response = await make_api_request(
        "/api/v1/gpgkeys",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def gpgkeyservice_create(body: str, upsert: str = None) -> Dict[str, Any]:
    """
    Create one or more GPG public keys in the server's configuration
    """
    logger.debug("Making POST request to /api/v1/gpgkeys")
    params = {}
    
    if body is not None:
      params["body"] = body
    
    if upsert is not None:
      params["upsert"] = upsert
    
    data = None

    # Add parameters to request
    if body is not None:
        data = body

    success, response = await make_api_request(
        "/api/v1/gpgkeys",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def gpgkeyservice_delete(keyID: str = None) -> Dict[str, Any]:
    """
    Delete specified GPG public key from the server's configuration
    """
    logger.debug("Making DELETE request to /api/v1/gpgkeys")
    params = {}
    
    if keyID is not None:
      params["keyID"] = keyID
    
    data = None

    success, response = await make_api_request(
        "/api/v1/gpgkeys",
        method="DELETE",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

