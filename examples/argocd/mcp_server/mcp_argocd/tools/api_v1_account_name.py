
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/account/{name} operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def accountservice_getaccount(path_name: str) -> Dict[str, Any]:
    '''
    Retrieves account information for the specified account name.

    Args:
        path_name (str): The name of the account to retrieve.

    Returns:
        Dict[str, Any]: The JSON response containing account details.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Get account by name
        description: Retrieves account information for the specified account name.
        operationId: accountservice_getaccount
        parameters:
          - name: path_name
            in: path
            required: true
            description: The name of the account to retrieve.
            schema:
              type: string
        responses:
          '200':
            description: Successful response with account details.
            content:
              application/json:
                schema:
                  type: object
          '404':
            description: Account not found.
            content:
              application/json:
                schema:
                  type: object
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
    '''
    logger.debug("Making GET request to /api/v1/account/{name}")
    params = {}
    data = None
    

    


    
    data = {}

    

    if not data:
        data = None
    success, response = await make_api_request(
        f"/api/v1/account/{path_name}",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
