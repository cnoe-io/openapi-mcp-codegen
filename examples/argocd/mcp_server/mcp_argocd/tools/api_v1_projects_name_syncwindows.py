# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/projects/{name}/syncwindows operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def project_service__get_sync_windows_state(path_name: str) -> Dict[str, Any]:
    '''
    Get the state of sync windows for a given project path.

    This function checks if there are any active sync windows for the specified project path.
    It makes an asynchronous GET request to the API endpoint associated with the project to
    retrieve the sync windows state.

    Args:
        path_name (str): The name of the project path for which to check the sync windows state.

    Returns:
        Dict[str, Any]: A dictionary containing the JSON response from the API call. The response
        includes information about the sync windows state.

    Raises:
        Exception: If the API request fails or returns an error, an exception is raised with the
        error details.
    '''
    logger.debug("Making GET request to /api/v1/projects/{name}/syncwindows")

    params = {}
    data = {}

    success, response = await make_api_request(
        f"/api/v1/projects/{path_name}/syncwindows", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response