# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name}/resource/links operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__list_resource_links(
    path_name: str,
    param_namespace: str = None,
    param_resourceName: str = None,
    param_version: str = None,
    param_group: str = None,
    param_kind: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
) -> Dict[str, Any]:
    """
    ListResourceLinks returns the list of all resource deep links

    OpenAPI Description:


    Args:
    path_name (str): OpenAPI parameter corresponding to 'path_name'.
    param_namespace (str = None): OpenAPI parameter corresponding to 'param_namespace'.
    param_resourceName (str = None): OpenAPI parameter corresponding to 'param_resourceName'.
    param_version (str = None): OpenAPI parameter corresponding to 'param_version'.
    param_group (str = None): OpenAPI parameter corresponding to 'param_group'.
    param_kind (str = None): OpenAPI parameter corresponding to 'param_kind'.
    param_appNamespace (str = None): OpenAPI parameter corresponding to 'param_appNamespace'.
    param_project (str = None): OpenAPI parameter corresponding to 'param_project'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /api/v1/applications/{name}/resource/links")

    params = {}
    data = {}

    params["namespace"] = param_namespace
    params["resourceName"] = param_resourceName
    params["version"] = param_version
    params["group"] = param_group
    params["kind"] = param_kind
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/resource/links", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
