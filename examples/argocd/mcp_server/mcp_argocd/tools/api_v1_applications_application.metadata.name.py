
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{application.metadata.name} operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def applicationservice_update(path_application_metadata_name: str, param_validate: str = None, param_project: str = None) -> Dict[str, Any]:
    '''
    Updates an existing application with the specified metadata name.

    Args:
        path_application_metadata_name (str): The name of the application's metadata to update.
        param_validate (str, optional): If set, validates the update request without applying changes. Defaults to None.
        param_project (str, optional): The project to which the application belongs. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the updated application details or error information.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      put:
        summary: Update an application
        description: Updates an existing application identified by its metadata name.
        operationId: applicationservice_update
        parameters:
          - name: application.metadata.name
            in: path
            required: true
            description: The name of the application's metadata to update.
            schema:
              type: string
          - name: validate
            in: query
            required: false
            description: If set, validates the update request without applying changes.
            schema:
              type: string
          - name: project
            in: query
            required: false
            description: The project to which the application belongs.
            schema:
              type: string
        requestBody:
          required: false
          content:
            application/json:
              schema:
                type: object
        responses:
          '200':
            description: Application updated successfully.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid request parameters.
            content:
              application/json:
                schema:
                  type: object
          '404':
            description: Application not found.
            content:
              application/json:
                schema:
                  type: object
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
    '''
    logger.debug("Making PUT request to /api/v1/applications/{application.metadata.name}")
    params = {}
    data = None





    params["validate"] = param_validate



    params["project"] = param_project




    data = {}







    if not data:
        data = None
    success, response = await make_api_request(
        f"/api/v1/applications/{path_application_metadata_name}",
        method="PUT",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
