
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applicationsets/generate operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def applicationsetservice_generate(body: str) -> Dict[str, Any]:
    '''
    Generates an ApplicationSet based on the provided configuration.

    Args:
        body (str): The JSON or YAML string representing the ApplicationSet configuration.

    Returns:
        Dict[str, Any]: The generated ApplicationSet or an error message if the request fails.

    Raises:
        Exception: If the API request encounters an unexpected error.

    OpenAPI Specification:
      post:
        summary: Generate an ApplicationSet
        description: Generates an ApplicationSet resource based on the provided configuration.
        operationId: applicationsetservice_generate
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: string
            application/yaml:
              schema:
                type: string
        responses:
          '200':
            description: Successfully generated ApplicationSet.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid input or failed to generate ApplicationSet.
            content:
              application/json:
                schema:
                  type: object
        tags:
          - ApplicationSetService
    '''
    logger.debug("Making POST request to /api/v1/applicationsets/generate")
    params = {}
    data = None

    # Add parameters to request
    if body is not None:
        data = body

    success, response = await make_api_request(
        "/api/v1/applicationsets/generate",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
