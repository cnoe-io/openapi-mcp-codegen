# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/account/password operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def account_service__update_password(
    body_current_password: str = None, body_name: str = None, body_new_password: str = None
) -> Dict[str, Any]:
    '''
    UpdatePassword updates an account's password to a new value.

    Args:
        body_current_password (str): The current password of the account.
        body_name (str): The name associated with the account.
        body_new_password (str): The new password to be set for the account.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the password update operation.

    Raises:
        Exception: If the API request fails or returns an error, an exception is raised with the error details.
    '''
    logger.debug("Making PUT request to /api/v1/account/password")

    params = {}
    data = {}

    if body_current_password:
        data["current_password"] = body_current_password
    if body_name:
        data["name"] = body_name
    if body_new_password:
        data["new_password"] = body_new_password

    success, response = await make_api_request("/api/v1/account/password", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response