# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/write-repositories/{repo} operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def repository_service__get_write(
    path_repo: str, param_forceRefresh: str = None, param_appProject: str = None
) -> Dict[str, Any]:
    '''
    GetWrite returns a repository or its write credentials.

    Args:
        path_repo (str): The path to the repository for which write credentials are requested.
        param_forceRefresh (str, optional): A flag to force refresh the credentials. Defaults to None.
        param_appProject (str, optional): The application project associated with the repository. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the repository details or write credentials.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/write-repositories/{repo}")

    params = {}
    data = {}

    params["forceRefresh"] = param_forceRefresh
    params["appProject"] = param_appProject

    success, response = await make_api_request(
        f"/api/v1/write-repositories/{path_repo}", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def repository_service__delete_write_repository(
    path_repo: str, param_forceRefresh: str = None, param_appProject: str = None
) -> Dict[str, Any]:
    '''
    Delete a write repository from the configuration.

    Args:
        path_repo (str): The path of the repository to be deleted.
        param_forceRefresh (str, optional): A parameter to force refresh the repository. Defaults to None.
        param_appProject (str, optional): The application project associated with the repository. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the delete operation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making DELETE request to /api/v1/write-repositories/{repo}")

    params = {}
    data = {}

    params["forceRefresh"] = param_forceRefresh
    params["appProject"] = param_appProject

    success, response = await make_api_request(
        f"/api/v1/write-repositories/{path_repo}", method="DELETE", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response