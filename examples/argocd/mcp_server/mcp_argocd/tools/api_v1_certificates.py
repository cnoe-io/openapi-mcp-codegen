# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/certificates operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def certificate_service__list_certificates(
    param_hostNamePattern: str = None, param_certType: str = None, param_certSubType: str = None
) -> Dict[str, Any]:
    '''
    List all available repository certificates.

    Args:
        param_hostNamePattern (str, optional): A pattern to match host names. Defaults to None.
        param_certType (str, optional): The type of certificate to filter by. Defaults to None.
        param_certSubType (str, optional): The subtype of certificate to filter by. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing certificate details.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/certificates")

    params = {}
    data = {}

    params["hostNamePattern"] = param_hostNamePattern
    params["certType"] = param_certType
    params["certSubType"] = param_certSubType

    success, response = await make_api_request("/api/v1/certificates", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def certificate_service__create_certificate(param_upsert: str = None) -> Dict[str, Any]:
    '''
    Creates repository certificates on the server.

    Args:
        param_upsert (str, optional): OpenAPI parameter corresponding to 'param_upsert'. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the details of the created certificate.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/certificates")

    params = {}
    data = {}

    params["upsert"] = param_upsert

    success, response = await make_api_request("/api/v1/certificates", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def certificate_service__delete_certificate(
    param_hostNamePattern: str = None, param_certType: str = None, param_certSubType: str = None
) -> Dict[str, Any]:
    '''
    Delete the certificates that match the RepositoryCertificateQuery.

    Args:
        param_hostNamePattern (str, optional): The pattern to match host names of the certificates to be deleted. Defaults to None.
        param_certType (str, optional): The type of certificates to be deleted. Defaults to None.
        param_certSubType (str, optional): The subtype of certificates to be deleted. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the delete operation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making DELETE request to /api/v1/certificates")

    params = {}
    data = {}

    params["hostNamePattern"] = param_hostNamePattern
    params["certType"] = param_certType
    params["certSubType"] = param_certSubType

    success, response = await make_api_request("/api/v1/certificates", method="DELETE", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response