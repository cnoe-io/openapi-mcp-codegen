# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/certificates operations"""

import logging
from typing import Dict, Any, List
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request


def assemble_nested_body(flat_body: Dict[str, Any]) -> Dict[str, Any]:
    '''
    Convert a flat dictionary with underscore-separated keys into a nested dictionary.

    Args:
        flat_body (Dict[str, Any]): A dictionary where keys are underscore-separated strings representing nested paths.

    Returns:
        Dict[str, Any]: A nested dictionary constructed from the flat dictionary.

    Raises:
        ValueError: If the input dictionary contains invalid keys that cannot be split into parts.
    '''
    nested = {}
    for key, value in flat_body.items():
        parts = key.split("_")
        d = nested
        for part in parts[:-1]:
            d = d.setdefault(part, {})
        d[parts[-1]] = value
    return nested


# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def certificate_service__list_certificates(
    param_hostNamePattern: str = None, param_certType: str = None, param_certSubType: str = None
) -> Dict[str, Any]:
    '''
    List all available repository certificates.

    Args:
        param_hostNamePattern (str, optional): A file-glob pattern (not regular expression) the host name has to match. Defaults to None.
        param_certType (str, optional): The type of the certificate to match (ssh or https). Defaults to None.
        param_certSubType (str, optional): The sub type of the certificate to match (protocol dependent, usually only used for ssh certs). Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the list of certificates.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/certificates")

    params = {}
    data = {}

    params["hostNamePattern"] = (
        str(param_hostNamePattern).lower() if isinstance(param_hostNamePattern, bool) else param_hostNamePattern
    )

    params["certType"] = str(param_certType).lower() if isinstance(param_certType, bool) else param_certType

    params["certSubType"] = str(param_certSubType).lower() if isinstance(param_certSubType, bool) else param_certSubType

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api/v1/certificates", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def certificate_service__create_certificate(
    body_items: List[str] = None,
    body_metadata_continue: str = None,
    body_metadata_remainingItemCount: int = None,
    body_metadata_resourceVersion: str = None,
    body_metadata_selfLink: str = None,
    param_upsert: bool = False,
) -> Dict[str, Any]:
    '''
    Creates repository certificates on the server.

    Args:
        body_items (List[str], optional): A list of items representing the certificates to be created. Defaults to None.
        body_metadata_continue (str, optional): A token indicating that the server has more data available. Used to retrieve the next set of available objects. Defaults to None.
        body_metadata_remainingItemCount (int, optional): The number of remaining items that the server can return. Defaults to None.
        body_metadata_resourceVersion (str, optional): The version of the resource. Defaults to None.
        body_metadata_selfLink (str, optional): A URL representing the self-link of the resource. Defaults to None.
        param_upsert (bool, optional): Indicates whether to upsert already existing certificates. Defaults to False.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the certificate creation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/certificates")

    params = {}
    data = {}

    params["upsert"] = str(param_upsert).lower() if isinstance(param_upsert, bool) else param_upsert

    flat_body = {}
    if body_items is not None:
        flat_body["items"] = body_items
    if body_metadata_continue is not None:
        flat_body["metadata_continue"] = body_metadata_continue
    if body_metadata_remainingItemCount is not None:
        flat_body["metadata_remainingItemCount"] = body_metadata_remainingItemCount
    if body_metadata_resourceVersion is not None:
        flat_body["metadata_resourceVersion"] = body_metadata_resourceVersion
    if body_metadata_selfLink is not None:
        flat_body["metadata_selfLink"] = body_metadata_selfLink
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api/v1/certificates", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def certificate_service__delete_certificate(
    param_hostNamePattern: str = None, param_certType: str = None, param_certSubType: str = None
) -> Dict[str, Any]:
    '''
    Delete the certificates that match the RepositoryCertificateQuery.

    Args:
        param_hostNamePattern (str, optional): A file-glob pattern (not regular expression) the host name has to match. Defaults to None.
        param_certType (str, optional): The type of the certificate to match (ssh or https). Defaults to None.
        param_certSubType (str, optional): The sub type of the certificate to match (protocol dependent, usually only used for ssh certs). Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making DELETE request to /api/v1/certificates")

    params = {}
    data = {}

    params["hostNamePattern"] = (
        str(param_hostNamePattern).lower() if isinstance(param_hostNamePattern, bool) else param_hostNamePattern
    )

    params["certType"] = str(param_certType).lower() if isinstance(param_certType, bool) else param_certType

    params["certSubType"] = str(param_certSubType).lower() if isinstance(param_certSubType, bool) else param_certSubType

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api/v1/certificates", method="DELETE", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response