# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/clusters operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def cluster_service__list(
    param_server: str = None, param_name: str = None, param_id_type: str = None, param_id_value: str = None
) -> Dict[str, Any]:
    '''
    List returns a list of clusters.

    Args:
        param_server (str, optional): OpenAPI parameter corresponding to 'param_server'. Defaults to None.
        param_name (str, optional): OpenAPI parameter corresponding to 'param_name'. Defaults to None.
        param_id_type (str, optional): Type of the specified cluster identifier ("server" - default, "name"). Defaults to None.
        param_id_value (str, optional): Value holds the cluster server URL or cluster name. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the list of clusters.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/clusters")

    params = {}
    data = {}

    params["server"] = param_server
    params["name"] = param_name
    params["id_type"] = param_id_type
    params["id_value"] = param_id_value

    success, response = await make_api_request("/api/v1/clusters", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def cluster_service__create(param_upsert: str = None) -> Dict[str, Any]:
    '''
    Creates a cluster using the specified parameters.

    Args:
        param_upsert (str, optional): OpenAPI parameter corresponding to 'param_upsert'. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing details of the created cluster or an error message.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/clusters")

    params = {}
    data = {}

    params["upsert"] = param_upsert

    success, response = await make_api_request("/api/v1/clusters", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response