# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/repositories/{repo} operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request


def assemble_nested_body(flat_body: Dict[str, Any]) -> Dict[str, Any]:
    '''
    Convert a flat dictionary with underscore-separated keys into a nested dictionary.

    Args:
        flat_body (Dict[str, Any]): A dictionary where keys are underscore-separated strings representing nested structure.

    Returns:
        Dict[str, Any]: A nested dictionary constructed from the flat dictionary.

    Raises:
        ValueError: If the input dictionary contains keys that cannot be split into parts.
    '''
    nested = {}
    for key, value in flat_body.items():
        parts = key.split("_")
        d = nested
        for part in parts[:-1]:
            d = d.setdefault(part, {})
        d[parts[-1]] = value
    return nested


# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def repository_service__get(
    path_repo: str, param_forceRefresh: bool = False, param_appProject: str = None
) -> Dict[str, Any]:
    '''
    Get returns a repository or its credentials.

    Args:
        path_repo (str): Repo URL for query.
        param_forceRefresh (bool, optional): Whether to force a cache refresh on repo's connection state. Defaults to False.
        param_appProject (str, optional): App project for query. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/repositories/{repo}")

    params = {}
    data = {}

    params["forceRefresh"] = (
        str(param_forceRefresh).lower() if isinstance(param_forceRefresh, bool) else param_forceRefresh
    )

    params["appProject"] = str(param_appProject).lower() if isinstance(param_appProject, bool) else param_appProject

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api/v1/repositories/{path_repo}", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def repository_service__delete_repository(
    path_repo: str, param_forceRefresh: bool = False, param_appProject: str = None
) -> Dict[str, Any]:
    '''
    DeleteRepository deletes a repository from the configuration.

    Args:
        path_repo (str): The URL of the repository to be deleted.
        param_forceRefresh (bool, optional): Indicates whether to force a cache refresh on the repository's connection state. Defaults to False.
        param_appProject (str, optional): The application project associated with the repository. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the delete operation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making DELETE request to /api/v1/repositories/{repo}")

    params = {}
    data = {}

    params["forceRefresh"] = (
        str(param_forceRefresh).lower() if isinstance(param_forceRefresh, bool) else param_forceRefresh
    )

    params["appProject"] = str(param_appProject).lower() if isinstance(param_appProject, bool) else param_appProject

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api/v1/repositories/{path_repo}", method="DELETE", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response