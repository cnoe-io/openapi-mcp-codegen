# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/projects/{project}/roles/{role}/token/{iat} operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def project_service__delete_token(
    path_project: str, path_role: str, path_iat: str, param_id: str = None
) -> Dict[str, Any]:
    """
    Delete a new project token

    OpenAPI Description:


    Args:
    path_project (str): OpenAPI parameter corresponding to 'path_project'.
    path_role (str): OpenAPI parameter corresponding to 'path_role'.
    path_iat (str): OpenAPI parameter corresponding to 'path_iat'.
    param_id (str = None): OpenAPI parameter corresponding to 'param_id'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making DELETE request to /api/v1/projects/{project}/roles/{role}/token/{iat}")

    params = {}
    data = {}

    params["id"] = param_id

    success, response = await make_api_request(
        f"/api/v1/projects/{path_project}/roles/{path_role}/token/{path_iat}", method="DELETE", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
