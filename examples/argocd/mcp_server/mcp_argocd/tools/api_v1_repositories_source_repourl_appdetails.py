# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/repositories/{source.repoURL}/appdetails operations"""

import logging
from typing import Dict, Any, List
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request


def assemble_nested_body(flat_body: Dict[str, Any]) -> Dict[str, Any]:
    '''
    Convert a flat dictionary with underscore-separated keys into a nested dictionary.

    Args:
        flat_body (Dict[str, Any]): A dictionary where keys are underscore-separated strings representing nested paths.

    Returns:
        Dict[str, Any]: A nested dictionary constructed from the flat dictionary.

    Raises:
        ValueError: If the input dictionary contains keys that cannot be split into valid parts.
    '''
    nested = {}
    for key, value in flat_body.items():
        parts = key.split("_")
        d = nested
        for part in parts[:-1]:
            d = d.setdefault(part, {})
        d[parts[-1]] = value
    return nested


# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def repository_service__get_app_details(
    path_source_repoURL: str,
    body_appName: str = None,
    body_appProject: str = None,
    body_source_chart: str = None,
    body_source_directory_exclude: str = None,
    body_source_directory_include: str = None,
    body_source_directory_jsonnet_extVars: List[str] = None,
    body_source_directory_jsonnet_libs: List[str] = None,
    body_source_directory_jsonnet_tlas: List[str] = None,
    body_source_directory_recurse: bool = None,
    body_source_helm_apiVersions: List[str] = None,
    body_source_helm_fileParameters: List[str] = None,
    body_source_helm_ignoreMissingValueFiles: bool = None,
    body_source_helm_kubeVersion: str = None,
    body_source_helm_namespace: str = None,
    body_source_helm_parameters: List[str] = None,
    body_source_helm_passCredentials: bool = None,
    body_source_helm_releaseName: str = None,
    body_source_helm_skipCrds: bool = None,
    body_source_helm_skipSchemaValidation: bool = None,
    body_source_helm_skipTests: bool = None,
    body_source_helm_valueFiles: List[str] = None,
    body_source_helm_values: str = None,
    body_source_helm_valuesObject_raw: str = None,
    body_source_helm_version: str = None,
    body_source_kustomize_apiVersions: List[str] = None,
    body_source_kustomize_commonAnnotations: Dict[str, Any] = None,
    body_source_kustomize_commonAnnotationsEnvsubst: bool = None,
    body_source_kustomize_commonLabels: Dict[str, Any] = None,
    body_source_kustomize_components: List[str] = None,
    body_source_kustomize_forceCommonAnnotations: bool = None,
    body_source_kustomize_forceCommonLabels: bool = None,
    body_source_kustomize_ignoreMissingComponents: bool = None,
    body_source_kustomize_images: List[str] = None,
    body_source_kustomize_kubeVersion: str = None,
    body_source_kustomize_labelIncludeTemplates: bool = None,
    body_source_kustomize_labelWithoutSelector: bool = None,
    body_source_kustomize_namePrefix: str = None,
    body_source_kustomize_nameSuffix: str = None,
    body_source_kustomize_namespace: str = None,
    body_source_kustomize_patches: List[str] = None,
    body_source_kustomize_replicas: List[str] = None,
    body_source_kustomize_version: str = None,
    body_source_name: str = None,
    body_source_path: str = None,
    body_source_plugin_env: List[str] = None,
    body_source_plugin_name: str = None,
    body_source_plugin_parameters: List[str] = None,
    body_source_ref: str = None,
    body_source_repoURL: str = None,
    body_source_targetRevision: str = None,
    body_sourceIndex: int = None,
    body_versionId: int = None,
) -> Dict[str, Any]:
    '''
    Get application details by the given path.

    Args:
        path_source_repoURL (str): The URL to the repository (Git or Helm) that contains the application manifests.
        body_appName (str, optional): The name of the application. Defaults to None.
        body_appProject (str, optional): The project associated with the application. Defaults to None.
        body_source_chart (str, optional): The Helm chart name, required for applications sourced from a Helm repo. Defaults to None.
        body_source_directory_exclude (str, optional): Directories to exclude. Defaults to None.
        body_source_directory_include (str, optional): Directories to include. Defaults to None.
        body_source_directory_jsonnet_extVars (List[str], optional): Jsonnet external variables. Defaults to None.
        body_source_directory_jsonnet_libs (List[str], optional): Jsonnet library paths. Defaults to None.
        body_source_directory_jsonnet_tlas (List[str], optional): Jsonnet top-level arguments. Defaults to None.
        body_source_directory_recurse (bool, optional): Whether to recurse into directories. Defaults to None.
        body_source_helm_apiVersions (List[str], optional): Kubernetes resource API versions for Helm. Defaults to None.
        body_source_helm_fileParameters (List[str], optional): Helm file parameters. Defaults to None.
        body_source_helm_ignoreMissingValueFiles (bool, optional): Ignore missing value files in Helm. Defaults to None.
        body_source_helm_kubeVersion (str, optional): Kubernetes API version for Helm. Defaults to None.
        body_source_helm_namespace (str, optional): Namespace for Helm templating. Defaults to None.
        body_source_helm_parameters (List[str], optional): Helm parameters. Defaults to None.
        body_source_helm_passCredentials (bool, optional): Pass credentials to Helm. Defaults to None.
        body_source_helm_releaseName (str, optional): Helm release name. Defaults to None.
        body_source_helm_skipCrds (bool, optional): Skip CRDs in Helm. Defaults to None.
        body_source_helm_skipSchemaValidation (bool, optional): Skip schema validation in Helm. Defaults to None.
        body_source_helm_skipTests (bool, optional): Skip test manifest installation in Helm. Defaults to None.
        body_source_helm_valueFiles (List[str], optional): Helm value files. Defaults to None.
        body_source_helm_values (str, optional): Helm values. Defaults to None.
        body_source_helm_valuesObject_raw (str, optional): Raw serialization of Helm values object. Defaults to None.
        body_source_helm_version (str, optional): Helm version. Defaults to None.
        body_source_kustomize_apiVersions (List[str], optional): Kubernetes resource API versions for Kustomize. Defaults to None.
        body_source_kustomize_commonAnnotations (Dict[str, Any], optional): Common annotations for Kustomize. Defaults to None.
        body_source_kustomize_commonAnnotationsEnvsubst (bool, optional): Environment substitution for common annotations in Kustomize. Defaults to None.
        body_source_kustomize_commonLabels (Dict[str, Any], optional): Common labels for Kustomize. Defaults to None.
        body_source_kustomize_components (List[str], optional): Kustomize components. Defaults to None.
        body_source_kustomize_forceCommonAnnotations (bool, optional): Force common annotations in Kustomize. Defaults to None.
        body_source_kustomize_forceCommonLabels (bool, optional): Force common labels in Kustomize. Defaults to None.
        body_source_kustomize_ignoreMissingComponents (bool, optional): Ignore missing components in Kustomize. Defaults to None.
        body_source_kustomize_images (List[str], optional): Kustomize images. Defaults to None.
        body_source_kustomize_kubeVersion (str, optional): Kubernetes API version for Kustomize. Defaults to None.
        body_source_kustomize_labelIncludeTemplates (bool, optional): Include templates in labels for Kustomize. Defaults to None.
        body_source_kustomize_labelWithoutSelector (bool, optional): Label without selector in Kustomize. Defaults to None.
        body_source_kustomize_namePrefix (str, optional): Name prefix for Kustomize. Defaults to None.
        body_source_kustomize_nameSuffix (str, optional): Name suffix for Kustomize. Defaults to None.
        body_source_kustomize_namespace (str, optional): Namespace for Kustomize. Defaults to None.
        body_source_kustomize_patches (List[str], optional): Patches for Kustomize. Defaults to None.
        body_source_kustomize_replicas (List[str], optional): Replicas for Kustomize. Defaults to None.
        body_source_kustomize_version (str, optional): Kustomize version. Defaults to None.
        body_source_name (str, optional): Name of the source, displayed in the UI. Defaults to None.
        body_source_path (str, optional): Directory path within the Git repository. Defaults to None.
        body_source_plugin_env (List[str], optional): Plugin environment variables. Defaults to None.
        body_source_plugin_name (str, optional): Plugin name. Defaults to None.
        body_source_plugin_parameters (List[str], optional): Plugin parameters. Defaults to None.
        body_source_ref (str, optional): Reference to another source. Defaults to None.
        body_source_repoURL (str, optional): Repository URL for the source. Defaults to None.
        body_source_targetRevision (str, optional): Target revision for syncing the application. Defaults to None.
        body_sourceIndex (int, optional): Index of the source. Defaults to None.
        body_versionId (int, optional): Version ID. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/repositories/{source.repoURL}/appdetails")

    params = {}
    data = {}

    flat_body = {}
    if body_appName is not None:
        flat_body["appName"] = body_appName
    if body_appProject is not None:
        flat_body["appProject"] = body_appProject
    if body_source_chart is not None:
        flat_body["source_chart"] = body_source_chart
    if body_source_directory_exclude is not None:
        flat_body["source_directory_exclude"] = body_source_directory_exclude
    if body_source_directory_include is not None:
        flat_body["source_directory_include"] = body_source_directory_include
    if body_source_directory_jsonnet_extVars is not None:
        flat_body["source_directory_jsonnet_extVars"] = body_source_directory_jsonnet_extVars
    if body_source_directory_jsonnet_libs is not None:
        flat_body["source_directory_jsonnet_libs"] = body_source_directory_jsonnet_libs
    if body_source_directory_jsonnet_tlas is not None:
        flat_body["source_directory_jsonnet_tlas"] = body_source_directory_jsonnet_tlas
    if body_source_directory_recurse is not None:
        flat_body["source_directory_recurse"] = body_source_directory_recurse
    if body_source_helm_apiVersions is not None:
        flat_body["source_helm_apiVersions"] = body_source_helm_apiVersions
    if body_source_helm_fileParameters is not None:
        flat_body["source_helm_fileParameters"] = body_source_helm_fileParameters
    if body_source_helm_ignoreMissingValueFiles is not None:
        flat_body["source_helm_ignoreMissingValueFiles"] = body_source_helm_ignoreMissingValueFiles
    if body_source_helm_kubeVersion is not None:
        flat_body["source_helm_kubeVersion"] = body_source_helm_kubeVersion
    if body_source_helm_namespace is not None:
        flat_body["source_helm_namespace"] = body_source_helm_namespace
    if body_source_helm_parameters is not None:
        flat_body["source_helm_parameters"] = body_source_helm_parameters
    if body_source_helm_passCredentials is not None:
        flat_body["source_helm_passCredentials"] = body_source_helm_passCredentials
    if body_source_helm_releaseName is not None:
        flat_body["source_helm_releaseName"] = body_source_helm_releaseName
    if body_source_helm_skipCrds is not None:
        flat_body["source_helm_skipCrds"] = body_source_helm_skipCrds
    if body_source_helm_skipSchemaValidation is not None:
        flat_body["source_helm_skipSchemaValidation"] = body_source_helm_skipSchemaValidation
    if body_source_helm_skipTests is not None:
        flat_body["source_helm_skipTests"] = body_source_helm_skipTests
    if body_source_helm_valueFiles is not None:
        flat_body["source_helm_valueFiles"] = body_source_helm_valueFiles
    if body_source_helm_values is not None:
        flat_body["source_helm_values"] = body_source_helm_values
    if body_source_helm_valuesObject_raw is not None:
        flat_body["source_helm_valuesObject_raw"] = body_source_helm_valuesObject_raw
    if body_source_helm_version is not None:
        flat_body["source_helm_version"] = body_source_helm_version
    if body_source_kustomize_apiVersions is not None:
        flat_body["source_kustomize_apiVersions"] = body_source_kustomize_apiVersions
    if body_source_kustomize_commonAnnotations is not None:
        flat_body["source_kustomize_commonAnnotations"] = body_source_kustomize_commonAnnotations
    if body_source_kustomize_commonAnnotationsEnvsubst is not None:
        flat_body["source_kustomize_commonAnnotationsEnvsubst"] = body_source_kustomize_commonAnnotationsEnvsubst
    if body_source_kustomize_commonLabels is not None:
        flat_body["source_kustomize_commonLabels"] = body_source_kustomize_commonLabels
    if body_source_kustomize_components is not None:
        flat_body["source_kustomize_components"] = body_source_kustomize_components
    if body_source_kustomize_forceCommonAnnotations is not None:
        flat_body["source_kustomize_forceCommonAnnotations"] = body_source_kustomize_forceCommonAnnotations
    if body_source_kustomize_forceCommonLabels is not None:
        flat_body["source_kustomize_forceCommonLabels"] = body_source_kustomize_forceCommonLabels
    if body_source_kustomize_ignoreMissingComponents is not None:
        flat_body["source_kustomize_ignoreMissingComponents"] = body_source_kustomize_ignoreMissingComponents
    if body_source_kustomize_images is not None:
        flat_body["source_kustomize_images"] = body_source_kustomize_images
    if body_source_kustomize_kubeVersion is not None:
        flat_body["source_kustomize_kubeVersion"] = body_source_kustomize_kubeVersion
    if body_source_kustomize_labelIncludeTemplates is not None:
        flat_body["source_kustomize_labelIncludeTemplates"] = body_source_kustomize_labelIncludeTemplates
    if body_source_kustomize_labelWithoutSelector is not None:
        flat_body["source_kustomize_labelWithoutSelector"] = body_source_kustomize_labelWithoutSelector
    if body_source_kustomize_namePrefix is not None:
        flat_body["source_kustomize_namePrefix"] = body_source_kustomize_namePrefix
    if body_source_kustomize_nameSuffix is not None:
        flat_body["source_kustomize_nameSuffix"] = body_source_kustomize_nameSuffix
    if body_source_kustomize_namespace is not None:
        flat_body["source_kustomize_namespace"] = body_source_kustomize_namespace
    if body_source_kustomize_patches is not None:
        flat_body["source_kustomize_patches"] = body_source_kustomize_patches
    if body_source_kustomize_replicas is not None:
        flat_body["source_kustomize_replicas"] = body_source_kustomize_replicas
    if body_source_kustomize_version is not None:
        flat_body["source_kustomize_version"] = body_source_kustomize_version
    if body_source_name is not None:
        flat_body["source_name"] = body_source_name
    if body_source_path is not None:
        flat_body["source_path"] = body_source_path
    if body_source_plugin_env is not None:
        flat_body["source_plugin_env"] = body_source_plugin_env
    if body_source_plugin_name is not None:
        flat_body["source_plugin_name"] = body_source_plugin_name
    if body_source_plugin_parameters is not None:
        flat_body["source_plugin_parameters"] = body_source_plugin_parameters
    if body_source_ref is not None:
        flat_body["source_ref"] = body_source_ref
    if body_source_repoURL is not None:
        flat_body["source_repoURL"] = body_source_repoURL
    if body_source_targetRevision is not None:
        flat_body["source_targetRevision"] = body_source_targetRevision
    if body_sourceIndex is not None:
        flat_body["sourceIndex"] = body_sourceIndex
    if body_versionId is not None:
        flat_body["versionId"] = body_versionId
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api/v1/repositories/{path_source_repoURL}/appdetails", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response