# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/write-repocreds operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request


def assemble_nested_body(flat_body: Dict[str, Any]) -> Dict[str, Any]:
    '''
    Convert a flat dictionary with underscore-separated keys into a nested dictionary.

    Args:
        flat_body (Dict[str, Any]): A dictionary where keys are underscore-separated strings representing nested paths.

    Returns:
        Dict[str, Any]: A nested dictionary constructed from the flat dictionary.

    Raises:
        ValueError: If the input dictionary contains invalid keys that cannot be split into parts.
    '''
    nested = {}
    for key, value in flat_body.items():
        parts = key.split("_")
        d = nested
        for part in parts[:-1]:
            d = d.setdefault(part, {})
        d[parts[-1]] = value
    return nested


# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def repo_creds_service__list_write_repository_credentials(param_url: str = None) -> Dict[str, Any]:
    '''
    ListWriteRepositoryCredentials retrieves a list of all configured repository credential sets that have write access.

    Args:
        param_url (str, optional): The repository URL for the query. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing the JSON response from the API call, which includes the list of repository credentials with write access.

    Raises:
        Exception: If the API request fails or returns an error, an exception is raised with the error details.
    '''
    logger.debug("Making GET request to /api/v1/write-repocreds")

    params = {}
    data = {}

    params["url"] = str(param_url).lower() if isinstance(param_url, bool) else param_url

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api/v1/write-repocreds", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def repo_creds_service__create_write_repository_credentials(
    body_bearerToken: str = None,
    body_enableOCI: bool = None,
    body_forceHttpBasicAuth: bool = None,
    body_gcpServiceAccountKey: str = None,
    body_githubAppEnterpriseBaseUrl: str = None,
    body_githubAppID: int = None,
    body_githubAppInstallationID: int = None,
    body_githubAppPrivateKey: str = None,
    body_noProxy: str = None,
    body_password: str = None,
    body_proxy: str = None,
    body_sshPrivateKey: str = None,
    body_tlsClientCertData: str = None,
    body_tlsClientCertKey: str = None,
    body_type: str = None,
    body_url: str = None,
    body_useAzureWorkloadIdentity: bool = None,
    body_username: str = None,
    param_upsert: bool = False,
) -> Dict[str, Any]:
    '''
    CreateWriteRepositoryCredentials creates a new repository credential set with write access.

    Args:
        body_bearerToken (str, optional): The bearer token for authentication. Defaults to None.
        body_enableOCI (bool, optional): Flag to enable OCI support. Defaults to None.
        body_forceHttpBasicAuth (bool, optional): Flag to force HTTP Basic Authentication. Defaults to None.
        body_gcpServiceAccountKey (str, optional): The GCP service account key. Defaults to None.
        body_githubAppEnterpriseBaseUrl (str, optional): The base URL for GitHub App Enterprise. Defaults to None.
        body_githubAppID (int, optional): The GitHub App ID. Defaults to None.
        body_githubAppInstallationID (int, optional): The GitHub App Installation ID. Defaults to None.
        body_githubAppPrivateKey (str, optional): The private key for the GitHub App. Defaults to None.
        body_noProxy (str, optional): The no-proxy setting. Defaults to None.
        body_password (str, optional): The password for authentication. Defaults to None.
        body_proxy (str, optional): The proxy setting. Defaults to None.
        body_sshPrivateKey (str, optional): The SSH private key. Defaults to None.
        body_tlsClientCertData (str, optional): The TLS client certificate data. Defaults to None.
        body_tlsClientCertKey (str, optional): The TLS client certificate key. Defaults to None.
        body_type (str, optional): Specifies the type of the repository credentials, either "git" or "helm". Defaults to None.
        body_url (str, optional): The URL of the repository. Defaults to None.
        body_useAzureWorkloadIdentity (bool, optional): Flag to use Azure Workload Identity. Defaults to None.
        body_username (str, optional): The username for authentication. Defaults to None.
        param_upsert (bool, optional): Whether to create in upsert mode. Defaults to False.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/write-repocreds")

    params = {}
    data = {}

    params["upsert"] = str(param_upsert).lower() if isinstance(param_upsert, bool) else param_upsert

    flat_body = {}
    if body_bearerToken is not None:
        flat_body["bearerToken"] = body_bearerToken
    if body_enableOCI is not None:
        flat_body["enableOCI"] = body_enableOCI
    if body_forceHttpBasicAuth is not None:
        flat_body["forceHttpBasicAuth"] = body_forceHttpBasicAuth
    if body_gcpServiceAccountKey is not None:
        flat_body["gcpServiceAccountKey"] = body_gcpServiceAccountKey
    if body_githubAppEnterpriseBaseUrl is not None:
        flat_body["githubAppEnterpriseBaseUrl"] = body_githubAppEnterpriseBaseUrl
    if body_githubAppID is not None:
        flat_body["githubAppID"] = body_githubAppID
    if body_githubAppInstallationID is not None:
        flat_body["githubAppInstallationID"] = body_githubAppInstallationID
    if body_githubAppPrivateKey is not None:
        flat_body["githubAppPrivateKey"] = body_githubAppPrivateKey
    if body_noProxy is not None:
        flat_body["noProxy"] = body_noProxy
    if body_password is not None:
        flat_body["password"] = body_password
    if body_proxy is not None:
        flat_body["proxy"] = body_proxy
    if body_sshPrivateKey is not None:
        flat_body["sshPrivateKey"] = body_sshPrivateKey
    if body_tlsClientCertData is not None:
        flat_body["tlsClientCertData"] = body_tlsClientCertData
    if body_tlsClientCertKey is not None:
        flat_body["tlsClientCertKey"] = body_tlsClientCertKey
    if body_type is not None:
        flat_body["type"] = body_type
    if body_url is not None:
        flat_body["url"] = body_url
    if body_useAzureWorkloadIdentity is not None:
        flat_body["useAzureWorkloadIdentity"] = body_useAzureWorkloadIdentity
    if body_username is not None:
        flat_body["username"] = body_username
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api/v1/write-repocreds", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response