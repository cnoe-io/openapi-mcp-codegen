# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/manifestsWithFiles operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__get_manifests_with_files(
    body_chunk_chunk: str = None,
    body_query_app_namespace: str = None,
    body_query_checksum: str = None,
    body_query_name: str = None,
    body_query_project: str = None,
) -> Dict[str, Any]:
    '''
    Get application manifests using provided files to generate them.

    Args:
        body_chunk_chunk (str, optional): The chunk of the body to be used in the request. Defaults to None.
        body_query_app_namespace (str, optional): The application namespace for the query. Defaults to None.
        body_query_checksum (str, optional): The checksum for the query to ensure data integrity. Defaults to None.
        body_query_name (str, optional): The name of the application for the query. Defaults to None.
        body_query_project (str, optional): The project associated with the application for the query. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the application manifests.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/applications/manifestsWithFiles")

    params = {}
    data = {}

    if body_chunk_chunk:
        data["chunk_chunk"] = body_chunk_chunk
    if body_query_app_namespace:
        data["query_app_namespace"] = body_query_app_namespace
    if body_query_checksum:
        data["query_checksum"] = body_query_checksum
    if body_query_name:
        data["query_name"] = body_query_name
    if body_query_project:
        data["query_project"] = body_query_project

    success, response = await make_api_request(
        "/api/v1/applications/manifestsWithFiles", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response