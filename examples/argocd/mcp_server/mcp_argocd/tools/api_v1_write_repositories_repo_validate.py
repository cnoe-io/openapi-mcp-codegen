# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/write-repositories/{repo}/validate operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def repository_service__validate_write_access(
    path_repo: str,
    param_username: str = None,
    param_password: str = None,
    param_sshPrivateKey: str = None,
    param_insecure: str = None,
    param_tlsClientCertData: str = None,
    param_tlsClientCertKey: str = None,
    param_type: str = None,
    param_name: str = None,
    param_enableOci: str = None,
    param_githubAppPrivateKey: str = None,
    param_githubAppID: str = None,
    param_githubAppInstallationID: str = None,
    param_githubAppEnterpriseBaseUrl: str = None,
    param_proxy: str = None,
    param_project: str = None,
    param_gcpServiceAccountKey: str = None,
    param_forceHttpBasicAuth: str = None,
    param_useAzureWorkloadIdentity: str = None,
    param_bearerToken: str = None,
) -> Dict[str, Any]:
    """
    ValidateWriteAccess validates write access to a repository with given parameters

    OpenAPI Description:


    Args:
    path_repo (str): OpenAPI parameter corresponding to 'path_repo'.
    param_username (str = None): OpenAPI parameter corresponding to 'param_username'.
    param_password (str = None): OpenAPI parameter corresponding to 'param_password'.
    param_sshPrivateKey (str = None): OpenAPI parameter corresponding to 'param_sshPrivateKey'.
    param_insecure (str = None): OpenAPI parameter corresponding to 'param_insecure'.
    param_tlsClientCertData (str = None): OpenAPI parameter corresponding to 'param_tlsClientCertData'.
    param_tlsClientCertKey (str = None): OpenAPI parameter corresponding to 'param_tlsClientCertKey'.
    param_type (str = None): OpenAPI parameter corresponding to 'param_type'.
    param_name (str = None): OpenAPI parameter corresponding to 'param_name'.
    param_enableOci (str = None): OpenAPI parameter corresponding to 'param_enableOci'.
    param_githubAppPrivateKey (str = None): OpenAPI parameter corresponding to 'param_githubAppPrivateKey'.
    param_githubAppID (str = None): OpenAPI parameter corresponding to 'param_githubAppID'.
    param_githubAppInstallationID (str = None): OpenAPI parameter corresponding to 'param_githubAppInstallationID'.
    param_githubAppEnterpriseBaseUrl (str = None): OpenAPI parameter corresponding to 'param_githubAppEnterpriseBaseUrl'.
    param_proxy (str = None): OpenAPI parameter corresponding to 'param_proxy'.
    param_project (str = None): OpenAPI parameter corresponding to 'param_project'.
    param_gcpServiceAccountKey (str = None): OpenAPI parameter corresponding to 'param_gcpServiceAccountKey'.
    param_forceHttpBasicAuth (str = None): OpenAPI parameter corresponding to 'param_forceHttpBasicAuth'.
    param_useAzureWorkloadIdentity (str = None): OpenAPI parameter corresponding to 'param_useAzureWorkloadIdentity'.
    param_bearerToken (str = None): OpenAPI parameter corresponding to 'param_bearerToken'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to /api/v1/write-repositories/{repo}/validate")

    params = {}
    data = {}

    params["username"] = param_username
    params["password"] = param_password
    params["sshPrivateKey"] = param_sshPrivateKey
    params["insecure"] = param_insecure
    params["tlsClientCertData"] = param_tlsClientCertData
    params["tlsClientCertKey"] = param_tlsClientCertKey
    params["type"] = param_type
    params["name"] = param_name
    params["enableOci"] = param_enableOci
    params["githubAppPrivateKey"] = param_githubAppPrivateKey
    params["githubAppID"] = param_githubAppID
    params["githubAppInstallationID"] = param_githubAppInstallationID
    params["githubAppEnterpriseBaseUrl"] = param_githubAppEnterpriseBaseUrl
    params["proxy"] = param_proxy
    params["project"] = param_project
    params["gcpServiceAccountKey"] = param_gcpServiceAccountKey
    params["forceHttpBasicAuth"] = param_forceHttpBasicAuth
    params["useAzureWorkloadIdentity"] = param_useAzureWorkloadIdentity
    params["bearerToken"] = param_bearerToken

    success, response = await make_api_request(
        f"/api/v1/write-repositories/{path_repo}/validate", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
