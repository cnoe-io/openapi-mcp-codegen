# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__list(
    param_name: str = None,
    param_refresh: str = None,
    param_projects: str = None,
    param_resourceVersion: str = None,
    param_selector: str = None,
    param_repo: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
) -> Dict[str, Any]:
    '''
    List returns a list of applications.

    Args:
        param_name (str, optional): The name of the application to filter by. Defaults to None.
        param_refresh (str, optional): Indicates whether to refresh the application data. Defaults to None.
        param_projects (str, optional): A comma-separated list of project names to filter applications by. Defaults to None.
        param_resourceVersion (str, optional): The resource version to filter applications by. Defaults to None.
        param_selector (str, optional): A label selector to filter applications by. Defaults to None.
        param_repo (str, optional): The repository URL to filter applications by. Defaults to None.
        param_appNamespace (str, optional): The namespace of the application to filter by. Defaults to None.
        param_project (str, optional): The project name to filter applications by. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the list of applications.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/applications")

    params = {}
    data = {}

    params["name"] = param_name
    params["refresh"] = param_refresh
    params["projects"] = param_projects
    params["resourceVersion"] = param_resourceVersion
    params["selector"] = param_selector
    params["repo"] = param_repo
    params["appNamespace"] = param_appNamespace
    params["project"] = param_project

    success, response = await make_api_request("/api/v1/applications", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def application_service__create(param_upsert: str = None, param_validate: str = None) -> Dict[str, Any]:
    '''
    Create an application.

    Args:
        param_upsert (str, optional): OpenAPI parameter corresponding to 'param_upsert'. Defaults to None.
        param_validate (str, optional): OpenAPI parameter corresponding to 'param_validate'. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/applications")

    params = {}
    data = {}

    params["upsert"] = param_upsert
    params["validate"] = param_validate

    success, response = await make_api_request("/api/v1/applications", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response