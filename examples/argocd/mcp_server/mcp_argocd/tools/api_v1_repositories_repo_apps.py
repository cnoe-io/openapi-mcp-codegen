# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/repositories/{repo}/apps operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def repository_service__list_apps(
    path_repo: str, param_revision: str = None, param_appName: str = None, param_appProject: str = None
) -> Dict[str, Any]:
    '''
    ListApps returns a list of applications in the specified repository.

    Args:
        path_repo (str): The path to the repository where the apps are located.
        param_revision (str, optional): The specific revision of the repository to query. Defaults to None.
        param_appName (str, optional): The name of the application to filter the results. Defaults to None.
        param_appProject (str, optional): The project associated with the application to filter the results. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing the JSON response from the API call, which includes the list of applications.

    Raises:
        Exception: If the API request fails or returns an error, an exception is raised with the error details.
    '''
    logger.debug("Making GET request to /api/v1/repositories/{repo}/apps")

    params = {}
    data = {}

    params["revision"] = param_revision
    params["appName"] = param_appName
    params["appProject"] = param_appProject

    success, response = await make_api_request(
        f"/api/v1/repositories/{path_repo}/apps", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response