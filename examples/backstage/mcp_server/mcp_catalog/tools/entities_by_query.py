
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entities/by-query operations"""

import logging
from typing import Dict, Any, List
from mcp_catalog.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def getentitiesbyquery(param_fields: List[str] = None, param_limit: int = None, param_offset: int = None, param_orderField: List[str] = None, param_cursor: str = None, param_filter: List[str] = None, param_fullTextFilterTerm: str = None, param_fullTextFilterFields: List[str] = None) -> Dict[str, Any]:
    '''
    Search for entities by a given query.

    Args:
        param_fields (List[str], optional): List of fields to include in the response. Defaults to None.
        param_limit (int, optional): Maximum number of entities to return. Defaults to None.
        param_offset (int, optional): Number of entities to skip before starting to collect the result set. Defaults to None.
        param_orderField (List[str], optional): List of fields to order the results by. Defaults to None.
        param_cursor (str, optional): Cursor for pagination. Defaults to None.
        param_filter (List[str], optional): List of filter expressions to apply. Defaults to None.
        param_fullTextFilterTerm (str, optional): Full-text search term to filter entities. Defaults to None.
        param_fullTextFilterFields (List[str], optional): List of fields to apply the full-text filter on. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the list of entities and metadata.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
        get:
          summary: Search for entities by a given query.
          operationId: getEntitiesByQuery
          parameters:
            - in: query
              name: fields
              schema:
                type: array
                items:
                  type: string
              description: List of fields to include in the response.
            - in: query
              name: limit
              schema:
                type: integer
              description: Maximum number of entities to return.
            - in: query
              name: offset
              schema:
                type: integer
              description: Number of entities to skip before starting to collect the result set.
            - in: query
              name: orderField
              schema:
                type: array
                items:
                  type: string
              description: List of fields to order the results by.
            - in: query
              name: cursor
              schema:
                type: string
              description: Cursor for pagination.
            - in: query
              name: filter
              schema:
                type: array
                items:
                  type: string
              description: List of filter expressions to apply.
            - in: query
              name: fullTextFilterTerm
              schema:
                type: string
              description: Full-text search term to filter entities.
            - in: query
              name: fullTextFilterFields
              schema:
                type: array
                items:
                  type: string
              description: List of fields to apply the full-text filter on.
          responses:
            '200':
              description: A JSON object containing the list of entities and metadata.
              content:
                application/json:
                  schema:
                    type: object
            '400':
              description: Invalid request parameters.
            '500':
              description: Internal server error.
    '''
    logger.debug("Making GET request to /entities/by-query")
    params = {}
    
    if param_fields is not None:
      params["param_fields"] = param_fields
    
    if param_limit is not None:
      params["param_limit"] = param_limit
    
    if param_offset is not None:
      params["param_offset"] = param_offset
    
    if param_orderField is not None:
      params["param_orderField"] = param_orderField
    
    if param_cursor is not None:
      params["param_cursor"] = param_cursor
    
    if param_filter is not None:
      params["param_filter"] = param_filter
    
    if param_fullTextFilterTerm is not None:
      params["param_fullTextFilterTerm"] = param_fullTextFilterTerm
    
    if param_fullTextFilterFields is not None:
      params["param_fullTextFilterFields"] = param_fullTextFilterFields
    
    data = None
    

    
    params["fields"] = param_fields
    

    
    params["limit"] = param_limit
    

    
    params["offset"] = param_offset
    

    
    params["orderField"] = param_orderField
    

    
    params["cursor"] = param_cursor
    

    
    params["filter"] = param_filter
    

    
    params["fullTextFilterTerm"] = param_fullTextFilterTerm
    

    
    params["fullTextFilterFields"] = param_fullTextFilterFields
    


    
    data = {}

    

    

    

    

    

    

    

    

    if not data:
        data = None
    success, response = await make_api_request(
        "/entities/by-query",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
