
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /analyze-location operations"""

import logging
from typing import Dict, Any
from mcp_catalog.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def analyzelocation(body_location: Dict[str, Any], body_catalogFileName: str = None) -> Dict[str, Any]:
    '''
    Validates a given location using the provided location data and optional catalog file name.

    Args:
        body_location (Dict[str, Any]): The location data to be validated.
        body_catalogFileName (str, optional): The name of the catalog file to use for validation. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing validation results or error information.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      post:
        summary: Validate a given location.
        operationId: analyzelocation
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    type: object
                    description: The location data to be validated.
                  catalogFileName:
                    type: string
                    description: The name of the catalog file to use for validation.
                required:
                  - location
        responses:
          '200':
            description: Successful validation of the location.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid input or validation error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
    '''
    logger.debug("Making POST request to /analyze-location")
    params = {}
    
    if body_location is not None:
      params["body_location"] = body_location
    
    if body_catalogFileName is not None:
      params["body_catalogFileName"] = body_catalogFileName
    
    data = None
    

    

    


    
    data = {}

    
    data["location"] = body_location
    

    
    data["catalogFileName"] = body_catalogFileName
    

    if not data:
        data = None
    success, response = await make_api_request(
        "/analyze-location",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
