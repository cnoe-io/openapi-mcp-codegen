
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /refresh operations"""

import logging
from typing import Dict, Any
from mcp_catalog.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def refreshentity(body_entityRef: str, body_authorizationToken: str = None) -> Dict[str, Any]:
    '''
    Refreshes the entity associated with the provided entity reference.

    Args:
        body_entityRef (str): The reference identifier of the entity to refresh.
        body_authorizationToken (str, optional): Authorization token for the request. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the refreshed entity data or error information.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      post:
        summary: Refresh the entity related to entityRef.
        operationId: refreshentity
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  entityRef:
                    type: string
                    description: The reference identifier of the entity to refresh.
                  authorizationToken:
                    type: string
                    description: Authorization token for the request.
                required:
                  - entityRef
        responses:
          '200':
            description: Successful response with refreshed entity data.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Bad request or invalid parameters.
            content:
              application/json:
                schema:
                  type: object
          '401':
            description: Unauthorized request.
            content:
              application/json:
                schema:
                  type: object
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
    '''
    logger.debug("Making POST request to /refresh")
    params = {}
    
    if body_entityRef is not None:
      params["body_entityRef"] = body_entityRef
    
    if body_authorizationToken is not None:
      params["body_authorizationToken"] = body_authorizationToken
    
    data = None
    

    

    


    
    data = {}

    
    data["entityRef"] = body_entityRef
    

    
    data["authorizationToken"] = body_authorizationToken
    

    if not data:
        data = None
    success, response = await make_api_request(
        "/refresh",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
