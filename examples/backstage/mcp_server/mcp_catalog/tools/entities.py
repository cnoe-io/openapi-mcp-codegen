
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entities operations"""

import logging
from typing import Dict, Any, List
from mcp_catalog.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def getentities(param_fields: List[str] = None, param_limit: int = None, param_filter: List[str] = None, param_offset: int = None, param_after: str = None, param_order: List[str] = None) -> Dict[str, Any]:
    '''
    Retrieves all entities matching the specified filter criteria.

    Args:
        param_fields (List[str], optional): List of fields to include in the response. Defaults to None.
        param_limit (int, optional): Maximum number of entities to return. Defaults to None.
        param_filter (List[str], optional): List of filter expressions to apply. Defaults to None.
        param_offset (int, optional): Number of entities to skip before starting to collect the result set. Defaults to None.
        param_after (str, optional): Pagination cursor to fetch entities after a specific entity. Defaults to None.
        param_order (List[str], optional): List of fields to order the results by. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response containing the list of entities and associated metadata.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Retrieve all entities matching the given filter.
        operationId: getEntities
        parameters:
          - in: query
            name: fields
            schema:
              type: array
              items:
                type: string
            required: false
            description: List of fields to include in the response.
          - in: query
            name: limit
            schema:
              type: integer
            required: false
            description: Maximum number of entities to return.
          - in: query
            name: filter
            schema:
              type: array
              items:
                type: string
            required: false
            description: List of filter expressions to apply.
          - in: query
            name: offset
            schema:
              type: integer
            required: false
            description: Number of entities to skip before starting to collect the result set.
          - in: query
            name: after
            schema:
              type: string
            required: false
            description: Pagination cursor to fetch entities after a specific entity.
          - in: query
            name: order
            schema:
              type: array
              items:
                type: string
            required: false
            description: List of fields to order the results by.
        responses:
          '200':
            description: A JSON object containing the list of entities.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    entities:
                      type: array
                      items:
                        type: object
                    total:
                      type: integer
                    next_cursor:
                      type: string
                      nullable: true
          '400':
            description: Invalid request parameters.
          '500':
            description: Internal server error.
    '''
    logger.debug("Making GET request to /entities")
    params = {}
    
    if param_fields is not None:
      params["param_fields"] = param_fields
    
    if param_limit is not None:
      params["param_limit"] = param_limit
    
    if param_filter is not None:
      params["param_filter"] = param_filter
    
    if param_offset is not None:
      params["param_offset"] = param_offset
    
    if param_after is not None:
      params["param_after"] = param_after
    
    if param_order is not None:
      params["param_order"] = param_order
    
    data = None
    

    
    params["fields"] = param_fields
    

    
    params["limit"] = param_limit
    

    
    params["filter"] = param_filter
    

    
    params["offset"] = param_offset
    

    
    params["after"] = param_after
    

    
    params["order"] = param_order
    


    
    data = {}

    

    

    

    

    

    

    if not data:
        data = None
    success, response = await make_api_request(
        "/entities",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
