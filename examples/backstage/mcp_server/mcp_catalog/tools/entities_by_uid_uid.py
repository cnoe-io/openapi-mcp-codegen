
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entities/by-uid/{uid} operations"""

import logging
from typing import Dict, Any
from mcp_catalog.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def getentitybyuid(path_uid: str) -> Dict[str, Any]:
    '''
    Retrieves a single entity by its unique identifier (UID).

    Args:
        path_uid (str): The unique identifier of the entity to retrieve.

    Returns:
        Dict[str, Any]: The JSON response containing the entity data.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Get a single entity by the UID.
        operationId: getEntityByUid
        parameters:
          - name: path_uid
            in: path
            required: true
            description: The unique identifier of the entity.
            schema:
              type: string
        responses:
          '200':
            description: Successful response with the entity data.
            content:
              application/json:
                schema:
                  type: object
          '404':
            description: Entity not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
    '''
    logger.debug("Making GET request to /entities/by-uid/{uid}")
    params = {}
    
    if path_uid is not None:
      params["path_uid"] = path_uid
    
    data = None
    

    


    
    data = {}

    

    if not data:
        data = None
    success, response = await make_api_request(
        f"/entities/by-uid/{path_uid}",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def deleteentitybyuid(path_uid: str) -> Dict[str, Any]:
    '''
    Deletes a single entity by its unique identifier (UID).

    Args:
        path_uid (str): The unique identifier of the entity to delete.

    Returns:
        Dict[str, Any]: The JSON response from the API call, typically indicating success or containing error details.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      delete:
        summary: Delete a single entity by UID.
        operationId: deleteEntityByUid
        parameters:
          - name: path_uid
            in: path
            required: true
            description: The unique identifier of the entity to delete.
            schema:
              type: string
        responses:
          '200':
            description: Entity deleted successfully.
            content:
              application/json:
                schema:
                  type: object
          '404':
            description: Entity not found.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid UID supplied.
            content:
              application/json:
                schema:
                  type: object
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
    '''
    logger.debug("Making DELETE request to /entities/by-uid/{uid}")
    params = {}
    
    if path_uid is not None:
      params["path_uid"] = path_uid
    
    data = None
    

    


    
    data = {}

    

    if not data:
        data = None
    success, response = await make_api_request(
        f"/entities/by-uid/{path_uid}",
        method="DELETE",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
