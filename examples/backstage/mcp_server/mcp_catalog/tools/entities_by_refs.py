
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entities/by-refs operations"""

import logging
from typing import Dict, Any, List
from mcp_catalog.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def getentitiesbyrefs(body_entityRefs: List[str], param_filter: List[str] = None, body_fields: List[str] = None) -> Dict[str, Any]:
    '''
    Retrieves a batch set of entities given an array of entity references.

    Args:
        body_entityRefs (List[str]): A list of entity reference strings to retrieve entities for.
        param_filter (List[str], optional): A list of filter strings to apply to the query. Defaults to None.
        body_fields (List[str], optional): A list of field names to include in the response. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the requested entities or an error message.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      post:
        summary: Get a batch set of entities by entity references.
        description: Retrieve multiple entities by providing an array of entityRefs.
        operationId: getEntitiesByRefs
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  entityRefs:
                    type: array
                    items:
                      type: string
                    description: List of entity reference strings.
                  fields:
                    type: array
                    items:
                      type: string
                    description: List of field names to include in the response.
        parameters:
          - in: query
            name: filter
            schema:
              type: array
              items:
                type: string
            required: false
            description: List of filter strings to apply to the query.
        responses:
          '200':
            description: A JSON object containing the requested entities.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid request parameters.
          '500':
            description: Internal server error.
    '''
    logger.debug("Making POST request to /entities/by-refs")
    params = {}
    
    if body_entityRefs is not None:
      params["body_entityRefs"] = body_entityRefs
    
    if param_filter is not None:
      params["param_filter"] = param_filter
    
    if body_fields is not None:
      params["body_fields"] = body_fields
    
    data = None
    

    

    
    params["filter"] = param_filter
    

    


    
    data = {}

    
    data["entityRefs"] = body_entityRefs
    

    

    
    data["fields"] = body_fields
    

    if not data:
        data = None
    success, response = await make_api_request(
        "/entities/by-refs",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
