
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /locations operations"""

import logging
from typing import Dict, Any
from mcp_catalog.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def createlocation(body_target: str, body_type: str, param_dryRun: str = None) -> Dict[str, Any]:
    '''
    Creates a location for a given target.

    Args:
        body_target (str): The target location to be created.
        body_type (str): The type of the location.
        param_dryRun (str, optional): If set, the request will be validated but not persisted. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      post:
        summary: Create a location for a given target.
        operationId: createlocation
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  target:
                    type: string
                    description: The target location to be created.
                  type:
                    type: string
                    description: The type of the location.
                required:
                  - target
                  - type
        parameters:
          - in: query
            name: dryRun
            schema:
              type: string
            required: false
            description: If set, the request will be validated but not persisted.
        responses:
          '200':
            description: Successful response with location details.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid request parameters.
          '500':
            description: Internal server error.
    '''
    logger.debug("Making POST request to /locations")
    params = {}
    
    if body_target is not None:
      params["body_target"] = body_target
    
    if body_type is not None:
      params["body_type"] = body_type
    
    if param_dryRun is not None:
      params["param_dryRun"] = param_dryRun
    
    data = None
    

    

    

    
    params["dryRun"] = param_dryRun
    


    
    data = {}

    
    data["target"] = body_target
    

    
    data["type"] = body_type
    

    

    if not data:
        data = None
    success, response = await make_api_request(
        "/locations",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def getlocations() -> Dict[str, Any]:
    '''
    Retrieves all available locations from the API.

    Args:
        None

    Returns:
        Dict[str, Any]: The JSON response containing a list of locations or an error message.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Get all locations
        description: Retrieve a list of all available locations.
        operationId: getLocations
        tags:
          - Locations
        responses:
          '200':
            description: A JSON array of location objects.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    locations:
                      type: array
                      items:
                        type: object
          '400':
            description: Bad request.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
    '''
    logger.debug("Making GET request to /locations")
    params = {}
    
    data = None
    


    
    data = {}

    if not data:
        data = None
    success, response = await make_api_request(
        "/locations",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
