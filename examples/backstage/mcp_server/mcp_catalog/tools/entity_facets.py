
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entity-facets operations"""

import logging
from typing import Dict, Any, List
from mcp_catalog.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def getentityfacets(param_facet: List[str], param_filter: List[str] = None) -> Dict[str, Any]:
    '''
    Retrieve all entity facets that match the specified filters.

    Args:
        param_facet (List[str]): List of facet names to retrieve for the entities.
        param_filter (List[str], optional): List of filters to apply to the entity facets. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response containing the matching entity facets.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Get all entity facets that match the given filters.
        operationId: getentityfacets
        parameters:
          - name: facet
            in: query
            description: List of facet names to retrieve for the entities.
            required: true
            schema:
              type: array
              items:
                type: string
          - name: filter
            in: query
            description: List of filters to apply to the entity facets.
            required: false
            schema:
              type: array
              items:
                type: string
        responses:
          '200':
            description: A JSON object containing the matching entity facets.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid request parameters.
          '500':
            description: Internal server error.
    '''
    logger.debug("Making GET request to /entity-facets")
    params = {}
    
    if param_facet is not None:
      params["param_facet"] = param_facet
    
    if param_filter is not None:
      params["param_filter"] = param_filter
    
    data = None
    

    
    params["facet"] = param_facet
    

    
    params["filter"] = param_filter
    


    
    data = {}

    

    

    if not data:
        data = None
    success, response = await make_api_request(
        "/entity-facets",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
