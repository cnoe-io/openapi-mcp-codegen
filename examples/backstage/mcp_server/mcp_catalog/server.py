
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

#!/usr/bin/env python3
"""
 MCP Server

This server provides a Model Context Protocol (MCP) interface to the ,
allowing large language models and AI assistants to interact with the service.
"""
import logging
import os
from dotenv import load_dotenv
from mcp.server.fastmcp import FastMCP


from mcp_catalog.tools import refresh

from mcp_catalog.tools import entities

from mcp_catalog.tools import entities_by_uid_uid

from mcp_catalog.tools import entities_by_name_kind_namespace_name

from mcp_catalog.tools import entities_by_name_kind_namespace_name_ancestry

from mcp_catalog.tools import entities_by_refs

from mcp_catalog.tools import entities_by_query

from mcp_catalog.tools import entity_facets

from mcp_catalog.tools import locations

from mcp_catalog.tools import locations_id

from mcp_catalog.tools import locations_by_entity_kind_namespace_name

from mcp_catalog.tools import analyze_location

from mcp_catalog.tools import validate_entity


def main():
    # Load environment variables
    load_dotenv()

    # Configure logging
    logging.basicConfig(level=logging.DEBUG)

    # Get MCP configuration from environment variables
    MCP_MODE = os.getenv("MCP_MODE", "STDIO")

    # Get host and port for server
    MCP_HOST = os.getenv("MCP_HOST", "localhost")
    MCP_PORT = int(os.getenv("MCP_PORT", "8000"))

    logging.info(f"Starting MCP server in {MCP_MODE} mode on {MCP_HOST}:{MCP_PORT}")

    # Get agent name from environment variables
    AGENT_NAME = os.getenv("AGENT_NAME", "CATALOG Agent")
    logging.info(f"Agent name: {AGENT_NAME}")

    # Create server instance
    if MCP_MODE == "SSE":
      mcp = FastMCP(f"{AGENT_NAME} MCP Server", host=MCP_HOST, port=MCP_PORT)
    else:
      mcp = FastMCP("CATALOG MCP Server")


    # Register refresh tools

    mcp.tool()(refresh.refreshentity)

    # Register entities tools

    mcp.tool()(entities.getentities)

    # Register entities_by_uid_uid tools

    mcp.tool()(entities_by_uid_uid.getentitybyuid)

    mcp.tool()(entities_by_uid_uid.deleteentitybyuid)

    # Register entities_by_name_kind_namespace_name tools

    mcp.tool()(entities_by_name_kind_namespace_name.getentitybyname)

    # Register entities_by_name_kind_namespace_name_ancestry tools

    mcp.tool()(entities_by_name_kind_namespace_name_ancestry.getentityancestrybyname)

    # Register entities_by_refs tools

    mcp.tool()(entities_by_refs.getentitiesbyrefs)

    # Register entities_by_query tools

    mcp.tool()(entities_by_query.getentitiesbyquery)

    # Register entity_facets tools

    mcp.tool()(entity_facets.getentityfacets)

    # Register locations tools

    mcp.tool()(locations.createlocation)

    mcp.tool()(locations.getlocations)

    # Register locations_id tools

    mcp.tool()(locations_id.getlocation)

    mcp.tool()(locations_id.deletelocation)

    # Register locations_by_entity_kind_namespace_name tools

    mcp.tool()(locations_by_entity_kind_namespace_name.getlocationbyentity)

    # Register analyze_location tools

    mcp.tool()(analyze_location.analyzelocation)

    # Register validate_entity tools

    mcp.tool()(validate_entity.validateentity)


    # Run the MCP server
    mcp.run()

if __name__ == "__main__":
    main()