# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

#!/usr/bin/env python3
"""
 MCP Server

This server provides a Model Context Protocol (MCP) interface to the ,
allowing large language models and AI assistants to interact with the service.
"""

import logging
import os
from dotenv import load_dotenv
from fastmcp import FastMCP


from mcp_splunk.tools import incident

from mcp_splunk.tools import incident_id

from mcp_splunk.tools import incident_clear

from mcp_splunk.tools import incident_id_clear

from mcp_splunk.tools import alertmuting

from mcp_splunk.tools import alertmuting_id

from mcp_splunk.tools import alertmuting_id_unmute

from mcp_splunk.tools import team

from mcp_splunk.tools import team_tid

from mcp_splunk.tools import team_tid_members

from mcp_splunk.tools import team_tid_member_uid

from mcp_splunk.tools import detector

from mcp_splunk.tools import detector_id

from mcp_splunk.tools import detector_id_enable

from mcp_splunk.tools import detector_id_disable

from mcp_splunk.tools import detector_id_events

from mcp_splunk.tools import detector_id_incidents

from mcp_splunk.tools import detector_validate

from mcp_splunk.tools import metric

from mcp_splunk.tools import metric_name

from mcp_splunk.tools import dimension

from mcp_splunk.tools import dimension_key_value

from mcp_splunk.tools import metrictimeseries

from mcp_splunk.tools import metrictimeseries_id

from mcp_splunk.tools import tag

from mcp_splunk.tools import tag_name

from mcp_splunk.tools import event

from mcp_splunk.tools import event_find

from mcp_splunk.tools import tests

from mcp_splunk.tools import tests_id

from mcp_splunk.tools import tests_bulk_delete

from mcp_splunk.tools import tests_play

from mcp_splunk.tools import tests_pause


def main():
    # Load environment variables
    load_dotenv()

    # Configure logging
    logging.basicConfig(level=logging.DEBUG)

    # Get MCP configuration from environment variables
    MCP_MODE = os.getenv("MCP_MODE", "stdio").lower()

    # Get host and port for server
    MCP_HOST = os.getenv("MCP_HOST", "localhost")
    MCP_PORT = int(os.getenv("MCP_PORT", "8000"))

    logging.info(f"Starting MCP server in {MCP_MODE} mode on {MCP_HOST}:{MCP_PORT}")

    # Get agent name from environment variables
    AGENT_NAME = os.getenv("AGENT_NAME", "SPLUNK Agent")
    logging.info(f"Agent name: {AGENT_NAME}")

    # Create server instance
    if MCP_MODE == "SSE":
        mcp = FastMCP(f"{AGENT_NAME} MCP Server", host=MCP_HOST, port=MCP_PORT)
    else:
        mcp = FastMCP("SPLUNK MCP Server")

    # Register incident tools

    mcp.tool()(incident.retrieve__incidents)

    # Register incident_id tools

    mcp.tool()(incident_id.retrieve__incident_id)

    # Register incident_clear tools

    mcp.tool()(incident_clear.clear__incidents)

    # Register incident_id_clear tools

    mcp.tool()(incident_id_clear.clear__single__incident)

    # Register alertmuting tools

    mcp.tool()(alertmuting.retrieve__muting__rules__using__query)

    mcp.tool()(alertmuting.create__single__muting__rule)

    # Register alertmuting_id tools

    mcp.tool()(alertmuting_id.retrieve__muting__rule_id)

    mcp.tool()(alertmuting_id.update__single__muting__rule)

    mcp.tool()(alertmuting_id.delete__single__muting__rule)

    # Register alertmuting_id_unmute tools

    mcp.tool()(alertmuting_id_unmute.unmute__single__muting__rule)

    # Register team tools

    mcp.tool()(team.retrieve__teams_by__name)

    mcp.tool()(team.create__single__team)

    # Register team_tid tools

    mcp.tool()(team_tid.retrieve__team__using_id)

    mcp.tool()(team_tid.update__team)

    mcp.tool()(team_tid.delete__team)

    # Register team_tid_members tools

    mcp.tool()(team_tid_members.add__team__member__list)

    mcp.tool()(team_tid_members.delete__team__members__list)

    # Register team_tid_member_uid tools

    mcp.tool()(team_tid_member_uid.update__team__membership__user__id)

    mcp.tool()(team_tid_member_uid.delete__team__user__user__id)

    # Register detector tools

    mcp.tool()(detector.create__single__detector)

    mcp.tool()(detector.retrieve__detectors__query)

    # Register detector_id tools

    mcp.tool()(detector_id.retrieve__detector_id)

    mcp.tool()(detector_id.update__single__detector)

    mcp.tool()(detector_id.delete__single__detector)

    # Register detector_id_enable tools

    mcp.tool()(detector_id_enable.enable__detect__blocks)

    # Register detector_id_disable tools

    mcp.tool()(detector_id_disable.disable__detect__blocks)

    # Register detector_id_events tools

    mcp.tool()(detector_id_events.retrieve__events__single__detector)

    # Register detector_id_incidents tools

    mcp.tool()(detector_id_incidents.retrieve__incidents__single__detector)

    # Register detector_validate tools

    mcp.tool()(detector_validate.validate__detector__definition)

    # Register metric tools

    mcp.tool()(metric.retrieve__metadata__metrics_query)

    # Register metric_name tools

    mcp.tool()(metric_name.retrieve__metadata__metric__name)

    # Register dimension tools

    mcp.tool()(dimension.retrieve__dimensions__query)

    # Register dimension_key_value tools

    mcp.tool()(dimension_key_value.retrieve__dimension__metadata__name__value)

    mcp.tool()(dimension_key_value.update__dimension__metadata)

    # Register metrictimeseries tools

    mcp.tool()(metrictimeseries.retrieve__metric__timeseries__metadata)

    # Register metrictimeseries_id tools

    mcp.tool()(metrictimeseries_id.retrieve_mts__metadata__using_id)

    # Register tag tools

    mcp.tool()(tag.retrieve__tag__metadata__using__query)

    # Register tag_name tools

    mcp.tool()(tag_name.retrieve__tag__metadata__using__name)

    mcp.tool()(tag_name.create__update__tag)

    mcp.tool()(tag_name.delete__single__tag)

    # Register event tools

    mcp.tool()(event.retrieve__custom__events__using__query)

    # Register event_find tools

    mcp.tool()(event_find.retrieve__events__using__query)

    # Register tests tools

    mcp.tool()(tests.get_tests)

    # Register tests_id tools

    mcp.tool()(tests_id.delete_test)

    # Register tests_bulk_delete tools

    mcp.tool()(tests_bulk_delete.delete_multiple_tests)

    # Register tests_play tools

    mcp.tool()(tests_play.play_multiple_tests)

    # Register tests_pause tools

    mcp.tool()(tests_pause.pause_multiple_tests)

    # Run the MCP server
    mcp.run(transport=MCP_MODE)


if __name__ == "__main__":
    main()
