# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /metrictimeseries operations"""

import logging
from typing import Any
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def retrieve__metric__timeseries__metadata(
    param_query: str = None, param_limit: int = None, param_searchInactive: bool = False
) -> Any:
    '''
    Retrieves metric timeseries (MTS) metadata based on a query.

    Args:
        param_query (str, optional): Search criteria used to filter the metric timeseries metadata. Defaults to None.
        param_limit (int, optional): Number of results to return from the result set. Defaults to None.
        param_searchInactive (bool, optional): Controls how Splunk Observability Cloud searches for metadata for inactive MTS. Set to True to search for both active and inactive MTS. Defaults to False.

    Returns:
        Any: The JSON response from the API call containing the requested metric timeseries metadata.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /metrictimeseries")

    params = {}
    data = {}

    if param_query is not None:
        params["query"] = str(param_query).lower() if isinstance(param_query, bool) else param_query

    if param_limit is not None:
        params["limit"] = str(param_limit).lower() if isinstance(param_limit, bool) else param_limit

    if param_searchInactive is not None:
        params["searchInactive"] = str(param_searchInactive).lower() if isinstance(param_searchInactive, bool) else param_searchInactive

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/metrictimeseries", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response