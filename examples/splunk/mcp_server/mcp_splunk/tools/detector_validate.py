# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /detector/validate operations"""

import logging
from typing import Dict, Any, List
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def validate__detector__definition(
    body_customProperties: List[Dict[str, Any]] = None,
    body_description: str = None,
    body_detectorOrigin: str = None,
    body_maxDelay: int = None,
    body_minDelay: int = None,
    body_name: str = None,
    body_parentDetectorId: str = None,
    body_programText: str = None,
    body_rules: List[str] = None,
    body_tags: List[str] = None,
    body_teams: List[str] = None,
    body_timezone: str = None,
    body_visualizationOptions_disableSampling: bool = None,
    body_visualizationOptions_publishLabelOptions: List[str] = None,
    body_visualizationOptions_showDataMarkers: bool = None,
    body_visualizationOptions_showEventLines: bool = None,
    body_visualizationOptions_time_end: int = None,
    body_visualizationOptions_time_range: int = None,
    body_visualizationOptions_time_start: int = None,
    body_visualizationOptions_time_type: str = None,
) -> Any:
    '''
    Validates a detector definition without creating it.

    Args:
        body_customProperties (List[Dict[str, Any]], optional): An array of custom properties for the detector. Defaults to None.
        body_description (str, optional): Detector description. Defaults to None.
        body_detectorOrigin (str, optional): Indicates how the detector was created. Defaults to None.
        body_maxDelay (int, optional): Upper limit in milliseconds for how long SignalFlow waits for delayed data before continuing. Defaults to None.
        body_minDelay (int, optional): Lower limit in milliseconds for how long SignalFlow waits before continuing. Defaults to None.
        body_name (str, optional): Name of the detector. Defaults to None.
        body_parentDetectorId (str, optional): ID of the parent detector. Defaults to None.
        body_programText (str, optional): The detector's SignalFlow program. Defaults to None.
        body_rules (List[str], optional): List of alert rules for the detector. Defaults to None.
        body_tags (List[str], optional): List of tags for the detector. Defaults to None.
        body_teams (List[str], optional): IDs of teams associated with this detector. Defaults to None.
        body_timezone (str, optional): Time zone for SignalFlow calendar window transformations. Defaults to None.
        body_visualizationOptions_disableSampling (bool, optional): Controls display of all data points instead of sampled data points. Defaults to None.
        body_visualizationOptions_publishLabelOptions (List[str], optional): List of display options for the detector's chart. Defaults to None.
        body_visualizationOptions_showDataMarkers (bool, optional): Controls the display of markers for data points. Defaults to None.
        body_visualizationOptions_showEventLines (bool, optional): Controls displaying vertical lines for event times. Defaults to None.
        body_visualizationOptions_time_end (int, optional): Timestamp of the last time to display. Defaults to None.
        body_visualizationOptions_time_range (int, optional): Number of milliseconds to display for the detector. Defaults to None.
        body_visualizationOptions_time_start (int, optional): Timestamp of the first time to display. Defaults to None.
        body_visualizationOptions_time_type (str, optional): Enumeration of time range choices. Defaults to None.

    Returns:
        Any: The JSON response from the API call indicating the validation result.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /detector/validate")

    params = {}
    data = {}

    flat_body = {}
    if body_customProperties is not None:
        flat_body["customProperties"] = body_customProperties
    if body_description is not None:
        flat_body["description"] = body_description
    if body_detectorOrigin is not None:
        flat_body["detectorOrigin"] = body_detectorOrigin
    if body_maxDelay is not None:
        flat_body["maxDelay"] = body_maxDelay
    if body_minDelay is not None:
        flat_body["minDelay"] = body_minDelay
    if body_name is not None:
        flat_body["name"] = body_name
    if body_parentDetectorId is not None:
        flat_body["parentDetectorId"] = body_parentDetectorId
    if body_programText is not None:
        flat_body["programText"] = body_programText
    if body_rules is not None:
        flat_body["rules"] = body_rules
    if body_tags is not None:
        flat_body["tags"] = body_tags
    if body_teams is not None:
        flat_body["teams"] = body_teams
    if body_timezone is not None:
        flat_body["timezone"] = body_timezone
    if body_visualizationOptions_disableSampling is not None:
        flat_body["visualizationOptions_disableSampling"] = body_visualizationOptions_disableSampling
    if body_visualizationOptions_publishLabelOptions is not None:
        flat_body["visualizationOptions_publishLabelOptions"] = body_visualizationOptions_publishLabelOptions
    if body_visualizationOptions_showDataMarkers is not None:
        flat_body["visualizationOptions_showDataMarkers"] = body_visualizationOptions_showDataMarkers
    if body_visualizationOptions_showEventLines is not None:
        flat_body["visualizationOptions_showEventLines"] = body_visualizationOptions_showEventLines
    if body_visualizationOptions_time_end is not None:
        flat_body["visualizationOptions_time_end"] = body_visualizationOptions_time_end
    if body_visualizationOptions_time_range is not None:
        flat_body["visualizationOptions_time_range"] = body_visualizationOptions_time_range
    if body_visualizationOptions_time_start is not None:
        flat_body["visualizationOptions_time_start"] = body_visualizationOptions_time_start
    if body_visualizationOptions_time_type is not None:
        flat_body["visualizationOptions_time_type"] = body_visualizationOptions_time_type
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/detector/validate", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response