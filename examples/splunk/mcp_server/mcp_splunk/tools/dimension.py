# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /dimension operations"""

import logging
from typing import Any
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def retrieve__dimensions__query(
    param_query: str = None, param_order_by: str = None, param_offset: int = None, param_limit: int = None
) -> Any:
    '''
    Retrieves dimensions based on query parameters.

    Args:
        param_query (str, optional): Dimension name or name and value to search for. Defaults to None.
        param_order_by (str, optional): Property on which the API should sort the query results. Defaults to None.
        param_offset (int, optional): Index in the result set at which the API should start returning results. Defaults to None.
        param_limit (int, optional): Number of results to return from the result set. Defaults to None.

    Returns:
        Any: The JSON response from the API call containing the list of dimensions matching the query parameters.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /dimension")

    params = {}
    data = {}

    if param_query is not None:
        params["query"] = str(param_query).lower() if isinstance(param_query, bool) else param_query

    if param_order_by is not None:
        params["order_by"] = str(param_order_by).lower() if isinstance(param_order_by, bool) else param_order_by

    if param_offset is not None:
        params["offset"] = str(param_offset).lower() if isinstance(param_offset, bool) else param_offset

    if param_limit is not None:
        params["limit"] = str(param_limit).lower() if isinstance(param_limit, bool) else param_limit

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/dimension", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response