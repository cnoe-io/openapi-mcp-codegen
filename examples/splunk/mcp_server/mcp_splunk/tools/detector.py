# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /detector operations"""

import logging
from typing import Dict, Any, List
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def create__single__detector(
    body_name: str,
    body_programText: str,
    body_rules: List[str],
    body_authorizedWriters_teams: List[str] = None,
    body_authorizedWriters_users: List[str] = None,
    body_customProperties: Dict[str, Any] = None,
    body_description: str = None,
    body_detectorOrigin: str = None,
    body_maxDelay: int = None,
    body_minDelay: int = None,
    body_packageSpecifications: str = None,
    body_parentDetectorId: str = None,
    body_tags: List[str] = None,
    body_teams: List[str] = None,
    body_timezone: str = None,
    body_visualizationOptions_disableSampling: bool = None,
    body_visualizationOptions_publishLabelOptions: List[str] = None,
    body_visualizationOptions_showDataMarkers: bool = None,
    body_visualizationOptions_showEventLines: bool = None,
    body_visualizationOptions_time_end: int = None,
    body_visualizationOptions_time_range: int = None,
    body_visualizationOptions_time_start: int = None,
    body_visualizationOptions_time_type: str = None,
) -> Any:
    '''
    Creates a detector.

    Args:
        body_name (str): Detector name.
        body_programText (str): The detector's SignalFlow program.
        body_rules (List[str]): List of alert rules for the detector.
        body_authorizedWriters_teams (List[str], optional): List of team IDs authorized to write. Defaults to None.
        body_authorizedWriters_users (List[str], optional): List of user IDs authorized to write. Defaults to None.
        body_customProperties (Dict[str, Any], optional): Detector metadata as key-value pairs. Defaults to None.
        body_description (str, optional): Detector description. Defaults to None.
        body_detectorOrigin (str, optional): Indicates how the detector was created. Defaults to None.
        body_maxDelay (int, optional): Upper limit (in milliseconds) for how long SignalFlow waits for delayed data before continuing. Defaults to None.
        body_minDelay (int, optional): Lower limit (in milliseconds) for how long SignalFlow waits before continuing. Defaults to None.
        body_packageSpecifications (str, optional): For internal use only. Defaults to None.
        body_parentDetectorId (str, optional): ID of the parent detector. Defaults to None.
        body_tags (List[str], optional): List of tags for the detector. Defaults to None.
        body_teams (List[str], optional): IDs of teams associated with this detector. Defaults to None.
        body_timezone (str, optional): Time zone for SignalFlow calendar window transformations. Defaults to None.
        body_visualizationOptions_disableSampling (bool, optional): Controls display of all data points instead of sampled data points. Defaults to None.
        body_visualizationOptions_publishLabelOptions (List[str], optional): List of display options for the detector's chart. Defaults to None.
        body_visualizationOptions_showDataMarkers (bool, optional): Controls the display of markers for data points. Defaults to None.
        body_visualizationOptions_showEventLines (bool, optional): Controls displaying vertical lines for event times. Defaults to None.
        body_visualizationOptions_time_end (int, optional): Timestamp of the last time to display. Defaults to None.
        body_visualizationOptions_time_range (int, optional): Number of milliseconds to display for the detector. Defaults to None.
        body_visualizationOptions_time_start (int, optional): Timestamp of the first time to display. Defaults to None.
        body_visualizationOptions_time_type (str, optional): Enumeration of time range choices. Defaults to None.

    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /detector")

    params = {}
    data = {}

    flat_body = {}
    if body_name is not None:
        flat_body["name"] = body_name
    if body_programText is not None:
        flat_body["programText"] = body_programText
    if body_rules is not None:
        flat_body["rules"] = body_rules
    if body_authorizedWriters_teams is not None:
        flat_body["authorizedWriters_teams"] = body_authorizedWriters_teams
    if body_authorizedWriters_users is not None:
        flat_body["authorizedWriters_users"] = body_authorizedWriters_users
    if body_customProperties is not None:
        flat_body["customProperties"] = body_customProperties
    if body_description is not None:
        flat_body["description"] = body_description
    if body_detectorOrigin is not None:
        flat_body["detectorOrigin"] = body_detectorOrigin
    if body_maxDelay is not None:
        flat_body["maxDelay"] = body_maxDelay
    if body_minDelay is not None:
        flat_body["minDelay"] = body_minDelay
    if body_packageSpecifications is not None:
        flat_body["packageSpecifications"] = body_packageSpecifications
    if body_parentDetectorId is not None:
        flat_body["parentDetectorId"] = body_parentDetectorId
    if body_tags is not None:
        flat_body["tags"] = body_tags
    if body_teams is not None:
        flat_body["teams"] = body_teams
    if body_timezone is not None:
        flat_body["timezone"] = body_timezone
    if body_visualizationOptions_disableSampling is not None:
        flat_body["visualizationOptions_disableSampling"] = body_visualizationOptions_disableSampling
    if body_visualizationOptions_publishLabelOptions is not None:
        flat_body["visualizationOptions_publishLabelOptions"] = body_visualizationOptions_publishLabelOptions
    if body_visualizationOptions_showDataMarkers is not None:
        flat_body["visualizationOptions_showDataMarkers"] = body_visualizationOptions_showDataMarkers
    if body_visualizationOptions_showEventLines is not None:
        flat_body["visualizationOptions_showEventLines"] = body_visualizationOptions_showEventLines
    if body_visualizationOptions_time_end is not None:
        flat_body["visualizationOptions_time_end"] = body_visualizationOptions_time_end
    if body_visualizationOptions_time_range is not None:
        flat_body["visualizationOptions_time_range"] = body_visualizationOptions_time_range
    if body_visualizationOptions_time_start is not None:
        flat_body["visualizationOptions_time_start"] = body_visualizationOptions_time_start
    if body_visualizationOptions_time_type is not None:
        flat_body["visualizationOptions_time_type"] = body_visualizationOptions_time_type
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/detector", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def retrieve__detectors__query(
    param_limit: int = None,
    param_name: str = None,
    param_offset: int = None,
    param_orderBy: str = None,
    param_tags: str = None,
    param_prefixTags: List[str] = None,
    param_prefixTagExclusions: List[str] = None,
) -> Any:
    '''
    Retrieves detectors based on search criteria.

    Args:
        param_limit (int, optional): Number of results to return from the result set. Defaults to None.
        param_name (str, optional): Search criteria for existing detector name. Defaults to None.
        param_offset (int, optional): Index in result set at which request should start returning detectors. Defaults to None.
        param_orderBy (str, optional): The field on which the API should sort the query results. Only fields specified in the enum are supported. Defaults to None.
        param_tags (str, optional): Detector tags search criteria. Defaults to None.
        param_prefixTags (List[str], optional): Search filter to return only detectors with at least one tag starting with any of the provided prefixes. Defaults to None.
        param_prefixTagExclusions (List[str], optional): Search filter to exclude detectors with at least one tag starting with any of the provided prefixes. Defaults to None.

    Returns:
        Any: The JSON response from the API call containing detector properties matching the query parameters.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /detector")

    params = {}
    data = {}

    if param_limit is not None:
        params["limit"] = str(param_limit).lower() if isinstance(param_limit, bool) else param_limit

    if param_name is not None:
        params["name"] = str(param_name).lower() if isinstance(param_name, bool) else param_name

    if param_offset is not None:
        params["offset"] = str(param_offset).lower() if isinstance(param_offset, bool) else param_offset

    if param_orderBy is not None:
        params["orderBy"] = str(param_orderBy).lower() if isinstance(param_orderBy, bool) else param_orderBy

    if param_tags is not None:
        params["tags"] = str(param_tags).lower() if isinstance(param_tags, bool) else param_tags

    if param_prefixTags is not None:
        params["prefixTags"] = str(param_prefixTags).lower() if isinstance(param_prefixTags, bool) else param_prefixTags

    if param_prefixTagExclusions is not None:
        params["prefixTagExclusions"] = (
            str(param_prefixTagExclusions).lower() if isinstance(param_prefixTagExclusions, bool) else param_prefixTagExclusions
        )

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/detector", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response