# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /tests operations"""

import logging
from typing import Any, List
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_tests(
    param_page: int = None,
    param_perPage: int = None,
    param_testType: str = None,
    param_orderby: str = None,
    param_search: str = None,
    param_locationId: str = None,
    param_customProperties: List[str] = None,
    param_testTypes: List[str] = None,
    param_frequencies: List[int] = None,
    param_locationIds: List[str] = None,
    param_lastRunStatus: List[str] = None,
    param_schedulingStragety: str = None,
    param_active: bool = False,
) -> Any:
    '''
    Retrieves a list of all tests with optional filtering and pagination.

    Args:
        param_page (int, optional): The page number of tests to return. Defaults to None.
        param_perPage (int, optional): The number of tests to return per page. Defaults to None.
        param_testType (str, optional): The type of test to return. Defaults to None.
        param_orderby (str, optional): The field by which to sort the tests. Defaults to None.
        param_search (str, optional): Search term to filter tests by name or type. Defaults to None.
        param_locationId (str, optional): Filter tests by a specific location ID. Defaults to None.
        param_customProperties (List[str], optional): Filter tests by custom properties. Defaults to None.
        param_testTypes (List[str], optional): List of test types to return. Defaults to None.
        param_frequencies (List[int], optional): Filter tests by specified frequencies. Defaults to None.
        param_locationIds (List[str], optional): Filter tests by a list of location IDs. Defaults to None.
        param_lastRunStatus (List[str], optional): Filter tests by their last run status. Defaults to None.
        param_schedulingStragety (str, optional): Filter tests by scheduling strategy. Defaults to None.
        param_active (bool, optional): Filter tests by active (True) or paused (False) status. Defaults to False.

    Returns:
        Any: The JSON response containing the list of tests and associated metadata.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /tests")

    params = {}
    data = {}

    if param_page is not None:
        params["page"] = str(param_page).lower() if isinstance(param_page, bool) else param_page

    if param_perPage is not None:
        params["perPage"] = str(param_perPage).lower() if isinstance(param_perPage, bool) else param_perPage

    if param_testType is not None:
        params["testType"] = str(param_testType).lower() if isinstance(param_testType, bool) else param_testType

    if param_orderby is not None:
        params["orderby"] = str(param_orderby).lower() if isinstance(param_orderby, bool) else param_orderby

    if param_search is not None:
        params["search"] = str(param_search).lower() if isinstance(param_search, bool) else param_search

    if param_locationId is not None:
        params["locationId"] = str(param_locationId).lower() if isinstance(param_locationId, bool) else param_locationId

    if param_customProperties is not None:
        params["customProperties"] = (
            str(param_customProperties).lower() if isinstance(param_customProperties, bool) else param_customProperties
        )

    if param_testTypes is not None:
        params["testTypes"] = str(param_testTypes).lower() if isinstance(param_testTypes, bool) else param_testTypes

    if param_frequencies is not None:
        params["frequencies"] = str(param_frequencies).lower() if isinstance(param_frequencies, bool) else param_frequencies

    if param_locationIds is not None:
        params["locationIds"] = str(param_locationIds).lower() if isinstance(param_locationIds, bool) else param_locationIds

    if param_lastRunStatus is not None:
        params["lastRunStatus"] = str(param_lastRunStatus).lower() if isinstance(param_lastRunStatus, bool) else param_lastRunStatus

    if param_schedulingStragety is not None:
        params["schedulingStragety"] = (
            str(param_schedulingStragety).lower() if isinstance(param_schedulingStragety, bool) else param_schedulingStragety
        )

    if param_active is not None:
        params["active"] = str(param_active).lower() if isinstance(param_active, bool) else param_active

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/tests", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response