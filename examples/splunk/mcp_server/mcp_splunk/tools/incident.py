# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /incident operations"""

import logging
from typing import Dict, Any
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def retrieve__incidents(
    param_includeResolved: bool = False, param_limit: int = None, param_offset: int = None, param_query: str = None
) -> Dict[str, Any]:
    '''
    Retrieves information for the latest incidents in an organization.

    Args:
        param_includeResolved (bool, optional): Controls retrieval of the latest resolved incidents. If True, includes resolved incidents in the results. Defaults to False.
        param_limit (int, optional): Number of results to return from the result set. Limits the number of incidents returned. Defaults to None.
        param_offset (int, optional): Index in the result set at which the API starts returning results. Used for pagination. Defaults to None.
        param_query (str, optional): Controls which latest incidents to retrieve, based on descriptions and other filters. For example, to retrieve the latest incidents created by detectors linked to a team with the ID `FO1Vq3ABXYZ`, specify `teamId:FO1Vq3ABXYZ`. To search for latest incidents by specific values of a dimension or custom property, use `query=<name>:<value>`. If `<value>` contains non-alphanumeric characters, encode the non-alphanumeric characters and surround the value with double quotes (e.g., `region:"US%20East"`). Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the latest incidents matching the specified criteria.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /incident")

    params = {}
    data = {}

    if param_includeResolved is not None:
        params["includeResolved"] = str(param_includeResolved).lower() if isinstance(param_includeResolved, bool) else param_includeResolved

    if param_limit is not None:
        params["limit"] = str(param_limit).lower() if isinstance(param_limit, bool) else param_limit

    if param_offset is not None:
        params["offset"] = str(param_offset).lower() if isinstance(param_offset, bool) else param_offset

    if param_query is not None:
        params["query"] = str(param_query).lower() if isinstance(param_query, bool) else param_query

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/incident", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response