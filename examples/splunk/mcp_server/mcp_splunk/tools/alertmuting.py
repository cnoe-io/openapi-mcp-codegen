# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /alertmuting operations"""

import logging
from typing import Any, List
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def retrieve__muting__rules__using__query(
    param_include: str = None, param_limit: int = None, param_offset: int = None, param_order_by: str = None, param_query: str = None
) -> Any:
    '''
    Retrieves notification muting rules based on query parameters.

    Args:
        param_include (str, optional): Type of muting rules to retrieve. Defaults to None.
        param_limit (int, optional): Number of results to return from the result set. Defaults to None.
        param_offset (int, optional): Index in the result set from which the API starts returning results. Defaults to None.
        param_order_by (str, optional): Metadata property on which the API sorts the results. Defaults to None.
        param_query (str, optional): Query that specifies the muting rules to retrieve. Defaults to None.

    Returns:
        Any: The JSON response from the API call containing the list of muting rules matching the search criteria.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /alertmuting")

    params = {}
    data = {}

    if param_include is not None:
        params["include"] = str(param_include).lower() if isinstance(param_include, bool) else param_include

    if param_limit is not None:
        params["limit"] = str(param_limit).lower() if isinstance(param_limit, bool) else param_limit

    if param_offset is not None:
        params["offset"] = str(param_offset).lower() if isinstance(param_offset, bool) else param_offset

    if param_order_by is not None:
        params["order_by"] = str(param_order_by).lower() if isinstance(param_order_by, bool) else param_order_by

    if param_query is not None:
        params["query"] = str(param_query).lower() if isinstance(param_query, bool) else param_query

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/alertmuting", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def create__single__muting__rule(
    param_resolveMatchingActiveAlerts: bool = False,
    body_created: int = None,
    body_creator: str = None,
    body_description: str = None,
    body_filters: List[str] = None,
    body_id: str = None,
    body_lastUpdated: int = None,
    body_lastUpdatedBy: str = None,
    body_recurrence_unit: str = None,
    body_recurrence_value: int = None,
    body_linkedTeams: List[str] = None,
    body_sendAlertsOnceMutingPeriodHasEnded: bool = None,
    body_startTime: int = None,
    body_stopTime: int = None,
) -> Any:
    '''
    Creates a new muting rule.

    Args:
        param_resolveMatchingActiveAlerts (bool, optional): Indicates whether Splunk Observability Cloud should resolve alerts for the matched rules. Defaults to False.
        body_created (int, optional): Detector creation timestamp in Unix time (milliseconds). Set by the system. Defaults to None.
        body_creator (str, optional): ID of the user who created the detector. Set by the system. Defaults to None.
        body_description (str, optional): Description of the muting rule. Defaults to None.
        body_filters (List[str], optional): List of muting filters for this rule. Defaults to None.
        body_id (str, optional): Detector ID. Set by the system. Defaults to None.
        body_lastUpdated (int, optional): Detector last updated timestamp in Unix time (milliseconds). Set by the system. Defaults to None.
        body_lastUpdatedBy (str, optional): ID of the user who last updated the detector. Defaults to None.
        body_recurrence_unit (str, optional): Unit of the recurrence period. Can be days ('d') or weeks ('w'). Defaults to None.
        body_recurrence_value (int, optional): Amount of time, expressed as an integer applicable to the unit. Defaults to None.
        body_linkedTeams (List[str], optional): IDs of teams linked to the detector that created the incident. This property is read-only and always set by the system. Defaults to None.
        body_sendAlertsOnceMutingPeriodHasEnded (bool, optional): Controls notifications after the muting period ends. Defaults to None.
        body_startTime (int, optional): Starting timestamp of the muting rule in Unix time (milliseconds). Defaults to None.
        body_stopTime (int, optional): Ending timestamp of the muting rule in Unix time (milliseconds). Defaults to None.

    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /alertmuting")

    params = {}
    data = {}

    if param_resolveMatchingActiveAlerts is not None:
        params["resolveMatchingActiveAlerts"] = (
            str(param_resolveMatchingActiveAlerts).lower()
            if isinstance(param_resolveMatchingActiveAlerts, bool)
            else param_resolveMatchingActiveAlerts
        )

    flat_body = {}
    if body_created is not None:
        flat_body["created"] = body_created
    if body_creator is not None:
        flat_body["creator"] = body_creator
    if body_description is not None:
        flat_body["description"] = body_description
    if body_filters is not None:
        flat_body["filters"] = body_filters
    if body_id is not None:
        flat_body["id"] = body_id
    if body_lastUpdated is not None:
        flat_body["lastUpdated"] = body_lastUpdated
    if body_lastUpdatedBy is not None:
        flat_body["lastUpdatedBy"] = body_lastUpdatedBy
    if body_recurrence_unit is not None:
        flat_body["recurrence_unit"] = body_recurrence_unit
    if body_recurrence_value is not None:
        flat_body["recurrence_value"] = body_recurrence_value
    if body_linkedTeams is not None:
        flat_body["linkedTeams"] = body_linkedTeams
    if body_sendAlertsOnceMutingPeriodHasEnded is not None:
        flat_body["sendAlertsOnceMutingPeriodHasEnded"] = body_sendAlertsOnceMutingPeriodHasEnded
    if body_startTime is not None:
        flat_body["startTime"] = body_startTime
    if body_stopTime is not None:
        flat_body["stopTime"] = body_stopTime
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/alertmuting", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response