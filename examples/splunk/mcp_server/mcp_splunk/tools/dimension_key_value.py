# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /dimension/{key}/{value} operations"""

import logging
from typing import Dict, Any, List
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def retrieve__dimension__metadata__name__value(path_key: str, path_value: str) -> Any:
    '''
    Retrieves metadata for the specified dimension and value.

    Args:
        path_key (str): The name of the dimension for which metadata is to be retrieved.
        path_value (str): The value of the specified dimension.

    Returns:
        Any: The JSON response containing metadata for the given dimension and value.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /dimension/{key}/{value}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/dimension/{path_key}/{path_value}", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def update__dimension__metadata(
    path_key: str,
    path_value: str,
    body_customProperties: Dict[str, Any] = None,
    body_description: str = None,
    body_key: str = None,
    body_value: str = None,
    body_tags: List[str] = None,
) -> Any:
    '''
    Overwrites metadata for the specified dimension.

    Args:
        path_key (str): Name of the dimension you want to update.
        path_value (str): Value of the dimension you want to update.
        body_customProperties (Dict[str, Any], optional): Custom property updates to apply to the dimension. Defaults to None.
        body_description (str, optional): Updated description of the dimension. Defaults to None.
        body_key (str, optional): Name of the dimension for which you want to update metadata. Defaults to None.
        body_value (str, optional): Value of the dimension for which you want to update metadata. Defaults to None.
        body_tags (List[str], optional): List of tags you want to add to the dimension. Defaults to None.

    Returns:
        Any: The JSON response from the API call containing the updated dimension metadata or error details.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making PUT request to /dimension/{key}/{value}")

    params = {}
    data = {}

    flat_body = {}
    if body_customProperties is not None:
        flat_body["customProperties"] = body_customProperties
    if body_description is not None:
        flat_body["description"] = body_description
    if body_key is not None:
        flat_body["key"] = body_key
    if body_value is not None:
        flat_body["value"] = body_value
    if body_tags is not None:
        flat_body["tags"] = body_tags
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/dimension/{path_key}/{path_value}", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response