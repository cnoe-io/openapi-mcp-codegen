# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /tag/{name} operations"""

import logging
from typing import Dict, Any
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def retrieve__tag__metadata__using__name(path_name: str) -> Any:
    '''
    Retrieves metadata for a specified tag by name.

    Args:
        path_name (str): The name of the tag for which metadata should be retrieved.

    Returns:
        Any: The JSON response containing metadata for the specified tag.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /tag/{name}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/tag/{path_name}", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def create__update__tag(
    path_name: str, body_customProperties: Dict[str, Any] = None, body_description: str = None, body_name: str = None
) -> Any:
    '''
    Creates or updates a tag with the specified properties.

    Args:
        path_name (str): The name of the tag to create or update.
        body_customProperties (Dict[str, Any], optional): Custom properties to associate with the tag. Defaults to None.
        body_description (str, optional): Description of the tag. Defaults to None.
        body_name (str, optional): The name to assign to the tag. Defaults to None.

    Returns:
        Any: The JSON response from the API call containing the created or updated tag details.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making PUT request to /tag/{name}")

    params = {}
    data = {}

    flat_body = {}
    if body_customProperties is not None:
        flat_body["customProperties"] = body_customProperties
    if body_description is not None:
        flat_body["description"] = body_description
    if body_name is not None:
        flat_body["name"] = body_name
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/tag/{path_name}", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def delete__single__tag(path_name: str) -> Any:
    '''
    Deletes the specified tag.

    Args:
        path_name (str): The name of the tag to delete.

    Returns:
        Any: The JSON response from the API call indicating the result of the delete operation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making DELETE request to /tag/{name}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/tag/{path_name}", method="DELETE", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response