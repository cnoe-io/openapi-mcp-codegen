# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet operations"""

import logging
from typing import Dict, Any, List, Literal
from mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def update_pet(
  body_id: int,
  body_name: str,
  body_photoUrls: List[str],
  body_category__id: int = None,
  body_category__name: str = None,
  body_tags: List[Dict[str, Any]] = None,
  body_status: Literal["available", "pending", "sold"] = None,
) -> Any:
  """
  Update an existing pet.

  OpenAPI Description:
      Update an existing pet by Id.

  Args:

      body_id (int): OpenAPI parameter corresponding to 'body_id'

      body_name (str): OpenAPI parameter corresponding to 'body_name'

      body_category__id (int): OpenAPI parameter corresponding to 'body_category__id'

      body_category__name (str): OpenAPI parameter corresponding to 'body_category__name'

      body_photoUrls (List[str]): OpenAPI parameter corresponding to 'body_photoUrls'

      body_tags (List[Dict[str, Any]]): OpenAPI parameter corresponding to 'body_tags'

      body_status (Literal['available', 'pending', 'sold']): pet status in the store


  Returns:
      Any: The JSON response from the API call.

  Raises:
      Exception: If the API request fails or returns an error.
  """
  logger.debug("Making PUT request to /pet")

  params = {}
  data = {}

  flat_body = {}
  if body_id is not None:
    flat_body["id"] = body_id
  if body_name is not None:
    flat_body["name"] = body_name
  if body_photoUrls is not None:
    flat_body["photoUrls"] = body_photoUrls
  if body_category__id is not None:
    flat_body["category__id"] = body_category__id
  if body_category__name is not None:
    flat_body["category__name"] = body_category__name
  if body_tags is not None:
    flat_body["tags"] = body_tags
  if body_status is not None:
    flat_body["status"] = body_status
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/pet", method="PUT", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response


async def add_pet(
  body_id: int,
  body_name: str,
  body_photoUrls: List[str],
  body_category__id: int = None,
  body_category__name: str = None,
  body_tags: List[Dict[str, Any]] = None,
  body_status: Literal["available", "pending", "sold"] = None,
) -> Any:
  """
  Add a new pet to the store.

  OpenAPI Description:
      Add a new pet to the store. Suggest and check no duplicate pet IDs already in the store.

  Args:

      body_id (int): OpenAPI parameter corresponding to 'body_id'

      body_name (str): OpenAPI parameter corresponding to 'body_name'

      body_category__id (int): OpenAPI parameter corresponding to 'body_category__id'

      body_category__name (str): OpenAPI parameter corresponding to 'body_category__name'

      body_photoUrls (List[str]): OpenAPI parameter corresponding to 'body_photoUrls'

      body_tags (List[Dict[str, Any]]): OpenAPI parameter corresponding to 'body_tags'

      body_status (Literal['available', 'pending', 'sold']): pet status in the store


  Returns:
      Any: The JSON response from the API call.

  Raises:
      Exception: If the API request fails or returns an error.
  """
  logger.debug("Making POST request to /pet")

  params = {}
  data = {}

  flat_body = {}
  if body_id is not None:
    flat_body["id"] = body_id
  if body_name is not None:
    flat_body["name"] = body_name
  if body_photoUrls is not None:
    flat_body["photoUrls"] = body_photoUrls
  if body_category__id is not None:
    flat_body["category__id"] = body_category__id
  if body_category__name is not None:
    flat_body["category__name"] = body_category__name
  if body_tags is not None:
    flat_body["tags"] = body_tags
  if body_status is not None:
    flat_body["status"] = body_status
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/pet", method="POST", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response
