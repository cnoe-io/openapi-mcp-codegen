# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user operations"""

import logging
from typing import Any
from mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def create_user(
  body_id: int = None,
  body_username: str = None,
  body_firstName: str = None,
  body_lastName: str = None,
  body_email: str = None,
  body_password: str = None,
  body_phone: str = None,
  body_userStatus: int = None,
) -> Any:
  """
  Create user.

  OpenAPI Description:
      This can only be done by the logged in user.

  Args:

      body_id (int): OpenAPI parameter corresponding to 'body_id'

      body_username (str): OpenAPI parameter corresponding to 'body_username'

      body_firstName (str): OpenAPI parameter corresponding to 'body_firstName'

      body_lastName (str): OpenAPI parameter corresponding to 'body_lastName'

      body_email (str): OpenAPI parameter corresponding to 'body_email'

      body_password (str): OpenAPI parameter corresponding to 'body_password'

      body_phone (str): OpenAPI parameter corresponding to 'body_phone'

      body_userStatus (int): User Status


  Returns:
      Any: The JSON response from the API call.

  Raises:
      Exception: If the API request fails or returns an error.
  """
  logger.debug("Making POST request to /user")

  params = {}
  data = {}

  flat_body = {}
  if body_id is not None:
    flat_body["id"] = body_id
  if body_username is not None:
    flat_body["username"] = body_username
  if body_firstName is not None:
    flat_body["firstName"] = body_firstName
  if body_lastName is not None:
    flat_body["lastName"] = body_lastName
  if body_email is not None:
    flat_body["email"] = body_email
  if body_password is not None:
    flat_body["password"] = body_password
  if body_phone is not None:
    flat_body["phone"] = body_phone
  if body_userStatus is not None:
    flat_body["userStatus"] = body_userStatus
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/user", method="POST", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response
