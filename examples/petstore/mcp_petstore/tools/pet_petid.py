# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet/{petId} operations"""

import logging
from typing import Any
from mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def get_pet_by_id(path_petId: int) -> Any:
  """
  Find pet by ID.

  OpenAPI Description:
      Returns a single pet.

  Args:

      path_petId (int): ID of pet to return


  Returns:
      Any: The JSON response from the API call.

  Raises:
      Exception: If the API request fails or returns an error.
  """
  logger.debug("Making GET request to /pet/{petId}")

  params = {}
  data = {}

  flat_body = {}
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request(f"/pet/{path_petId}", method="GET", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response


async def update_pet_with_form(path_petId: int, param_name: str = None, param_status: str = None) -> Any:
  """
  Updates a pet in the store with form data.

  OpenAPI Description:
      Updates a pet resource based on the form data.

  Args:

      path_petId (int): ID of pet that needs to be updated

      param_name (str): Name of pet that needs to be updated

      param_status (str): Status of pet that needs to be updated


  Returns:
      Any: The JSON response from the API call.

  Raises:
      Exception: If the API request fails or returns an error.
  """
  logger.debug("Making POST request to /pet/{petId}")

  params = {}
  data = {}

  if param_name is not None:
    params["name"] = str(param_name).lower() if isinstance(param_name, bool) else param_name

  if param_status is not None:
    params["status"] = str(param_status).lower() if isinstance(param_status, bool) else param_status

  flat_body = {}
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request(f"/pet/{path_petId}", method="POST", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response


async def delete_pet(path_petId: int) -> Any:
  """
  Deletes a pet.

  OpenAPI Description:
      Delete a pet.

  Args:

      path_petId (int): Pet id to delete


  Returns:
      Any: The JSON response from the API call.

  Raises:
      Exception: If the API request fails or returns an error.
  """
  logger.debug("Making DELETE request to /pet/{petId}")

  params = {}
  data = {}

  flat_body = {}
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request(f"/pet/{path_petId}", method="DELETE", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response
