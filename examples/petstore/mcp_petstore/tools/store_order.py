# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /store/order operations"""

import logging
from typing import Any, Literal
from mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def place_order(
  body_id: int = None,
  body_petId: int = None,
  body_quantity: int = None,
  body_shipDate: str = None,
  body_status: Literal["placed", "approved", "delivered"] = None,
  body_complete: bool = None,
) -> Any:
  """
  Place an order for a pet.

  OpenAPI Description:
      Place a new order in the store.

  Args:

      body_id (int): OpenAPI parameter corresponding to 'body_id'

      body_petId (int): OpenAPI parameter corresponding to 'body_petId'

      body_quantity (int): OpenAPI parameter corresponding to 'body_quantity'

      body_shipDate (str): OpenAPI parameter corresponding to 'body_shipDate'

      body_status (Literal['placed', 'approved', 'delivered']): Order Status

      body_complete (bool): OpenAPI parameter corresponding to 'body_complete'


  Returns:
      Any: The JSON response from the API call.

  Raises:
      Exception: If the API request fails or returns an error.
  """
  logger.debug("Making POST request to /store/order")

  params = {}
  data = {}

  flat_body = {}
  if body_id is not None:
    flat_body["id"] = body_id
  if body_petId is not None:
    flat_body["petId"] = body_petId
  if body_quantity is not None:
    flat_body["quantity"] = body_quantity
  if body_shipDate is not None:
    flat_body["shipDate"] = body_shipDate
  if body_status is not None:
    flat_body["status"] = body_status
  if body_complete is not None:
    flat_body["complete"] = body_complete
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/store/order", method="POST", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response
