# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet/findByTags operations"""

import logging
from typing import Any, List
from mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def find_pets_by_tags(param_tags: List[str] = None) -> Any:
  """
  Finds Pets by tags.

  OpenAPI Description:
      Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.

  Args:

      param_tags (List[str]): Tags to filter by


  Returns:
      Any: The JSON response from the API call.

  Raises:
      Exception: If the API request fails or returns an error.
  """
  logger.debug("Making GET request to /pet/findByTags")

  params = {}
  data = {}

  if param_tags is not None:
    params["tags"] = str(param_tags).lower() if isinstance(param_tags, bool) else param_tags

  flat_body = {}
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/pet/findByTags", method="GET", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response
