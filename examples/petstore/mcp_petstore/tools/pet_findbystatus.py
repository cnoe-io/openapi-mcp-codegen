# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet/findByStatus operations"""

import logging
from typing import Any, Literal
from mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def find_pets_by_status(param_status: Literal["available", "pending", "sold"] = None) -> Any:
  """
  Finds Pets by status.

  OpenAPI Description:
      Multiple status values can be provided with comma separated strings.

  Args:

      param_status (Literal['available', 'pending', 'sold']): Status values that need to be considered for filter


  Returns:
      Any: The JSON response from the API call.

  Raises:
      Exception: If the API request fails or returns an error.
  """
  logger.debug("Making GET request to /pet/findByStatus")

  params = {}
  data = {}

  if param_status is not None:
    params["status"] = str(param_status).lower() if isinstance(param_status, bool) else param_status

  flat_body = {}
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/pet/findByStatus", method="GET", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response
