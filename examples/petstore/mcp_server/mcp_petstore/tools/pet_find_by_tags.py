# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet/findByTags operations"""

import logging
from typing import Dict, Any, List
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def find_pets_by_tags(param_tags: List[str] = None) -> Dict[str, Any]:
    '''
    Finds pets by tags.

    Args:
        param_tags (List[str], optional): List of tags to filter pets by. Multiple tags can be provided as a list of strings. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the list of pets matching the provided tags.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Finds Pets by tags
        description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
        operationId: findPetsByTags
        parameters:
          - name: tags
            in: query
            description: Tags to filter by
            required: false
            style: form
            explode: true
            schema:
              type: array
              items:
                type: string
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Pet'
          '400':
            description: Invalid tag value
    '''
    logger.debug("Making GET request to /pet/findByTags")

    params = {}
    data = {}

    params["tags"] = param_tags

    success, response = await make_api_request("/pet/findByTags", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response