
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet/{petid} operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def getpetbyid(path_petid: int) -> Dict[str, Any]:
    """
    Find pet by ID. Returns a single pet.
    Args:
        path_petid (int): ID of pet to return

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /pet/{petid}")
    params = {}
    data = {}
    if not data:
        data = None
    success, response = await make_api_request(
        f"/pet/{path_petid}",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def updatepetwithform(path_petid: int, param_name: str = None, param_status: str = None) -> Dict[str, Any]:
    """
    Updates a pet in the store with form data. Updates a pet resource based on the form data.
    Args:
        path_petid (int): ID of pet that needs to be updated
        param_name (str): Name of pet that needs to be updated
        param_status (str): Status of pet that needs to be updated

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to /pet/{petid}")
    params = {}
    params["name"] = param_name
    params["status"] = param_status
    data = {}
    if not data:
        data = None
    success, response = await make_api_request(
        f"/pet/{path_petid}",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def deletepet(path_petid: int) -> Dict[str, Any]:
    """
    Deletes a pet. Delete a pet.
    Args:
        path_petid (int): Pet id to delete

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making DELETE request to /pet/{petid}")
    params = {}
    data = {}
    if not data:
        data = None
    success, response = await make_api_request(
        f"/pet/{path_petid}",
        method="DELETE",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

