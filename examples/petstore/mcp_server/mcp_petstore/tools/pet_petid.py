
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for  operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def getpetbyid(path_petid: int) -> Dict[str, Any]:
    """
    Find pet by ID.

    OpenAPI Description:
        Returns a single pet.

    Args:path_petid (int): OpenAPI parameter corresponding to 'path_petid'.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to ")
    params = {}
    
    if path_petid is not None:
      params["path_petid"] = path_petid
    
    data = None
    

    


    
    data = {}

    

    if not data:
        data = None
    success, response = await make_api_request(
        f"/pet/{path_petid}",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def updatepetwithform(path_petid: int, param_name: str = None, param_status: str = None) -> Dict[str, Any]:
    """
    Updates a pet in the store with form data.

    OpenAPI Description:
        Updates a pet resource based on the form data.

    Args:path_petid (int): OpenAPI parameter corresponding to 'path_petid'.param_name (str = None): OpenAPI parameter corresponding to 'param_name'.param_status (str = None): OpenAPI parameter corresponding to 'param_status'.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to ")
    params = {}
    
    if path_petid is not None:
      params["path_petid"] = path_petid
    
    if param_name is not None:
      params["param_name"] = param_name
    
    if param_status is not None:
      params["param_status"] = param_status
    
    data = None
    

    

    
    params["name"] = param_name
    

    
    params["status"] = param_status
    


    
    data = {}

    

    

    

    if not data:
        data = None
    success, response = await make_api_request(
        f"/pet/{path_petid}",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def deletepet(path_petid: int) -> Dict[str, Any]:
    """
    Deletes a pet.

    OpenAPI Description:
        Delete a pet.

    Args:path_petid (int): OpenAPI parameter corresponding to 'path_petid'.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making DELETE request to ")
    params = {}
    
    if path_petid is not None:
      params["path_petid"] = path_petid
    
    data = None
    

    


    
    data = {}

    

    if not data:
        data = None
    success, response = await make_api_request(
        f"/pet/{path_petid}",
        method="DELETE",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

