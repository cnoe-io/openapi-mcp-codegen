
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user/login operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


<<<<<<< Updated upstream
async def loginuser(username: str = None, password: str = None) -> Dict[str, Any]:
    '''
    Logs a user into the system using provided credentials.

    Args:
        username (str, optional): The username of the user. Defaults to None.
        password (str, optional): The password of the user. Defaults to None.
=======
async def loginuser(param_username: str = None, param_password: str = None) -> Dict[str, Any]:
    """
    Logs user into the system. Log into the system.
    Args:
        param_username (str): The user name for login
        param_password (str): The password for login in clear text
>>>>>>> Stashed changes

    Returns:
        Dict[str, Any]: A dictionary containing the login response, which may include authentication tokens or error messages.

    Raises:
<<<<<<< Updated upstream
        Exception: If the API request fails due to network issues or unexpected errors.

    OpenAPI Specification:
      get:
        summary: Logs user into the system.
        operationId: loginuser
        parameters:
          - name: username
            in: query
            description: The username of the user.
            required: false
            schema:
              type: string
          - name: password
            in: query
            description: The password of the user.
            required: false
            schema:
              type: string
        responses:
          '200':
            description: Successful login response.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
                      description: Authentication token.
                    user:
                      type: object
                      description: User information.
          '400':
            description: Invalid credentials or missing parameters.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      description: Error message.
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      description: Error message.
    '''
=======
        Exception: If the API request fails or returns an error.
    """
>>>>>>> Stashed changes
    logger.debug("Making GET request to /user/login")
    params = {}
    
    if username is not None:
      params["username"] = username
    
    if password is not None:
      params["password"] = password
    
    data = None

    success, response = await make_api_request(
        "/user/login",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

