
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user/login operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def loginuser(username: str = None, password: str = None) -> Dict[str, Any]:
    '''
    Logs a user into the system using provided credentials.

    Args:
        username (str, optional): The username of the user. Defaults to None.
        password (str, optional): The password of the user. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing the login response, which may include authentication tokens or error messages.

    Raises:
        Exception: If the API request fails or an unexpected error occurs.

    OpenAPI Specification:
      post:
        summary: Logs user into the system.
        operationId: loginuser
        tags:
          - user
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: The username of the user.
                  password:
                    type: string
                    description: The password of the user.
                required:
                  - username
                  - password
        responses:
          '200':
            description: Successful login
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
                      description: Authentication token for the user.
                    userId:
                      type: string
                      description: The unique identifier of the user.
          '401':
            description: Invalid username or password
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      description: Error message indicating authentication failure.
          '500':
            description: Server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      description: Error message indicating server failure.
    '''
    logger.debug("Making GET request to /user/login")
    params = {}
    data = None

    success, response = await make_api_request(
        "/user/login",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
