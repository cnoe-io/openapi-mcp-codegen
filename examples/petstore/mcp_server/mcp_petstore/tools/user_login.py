# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user/login operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def login_user(param_username: str = None, param_password: str = None) -> Dict[str, Any]:
    '''
    Logs a user into the system.

    Args:
        param_username (str, optional): The username of the user to log in. Defaults to None.
        param_password (str, optional): The password of the user to log in. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, typically containing authentication details or error information.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      summary: Log into the system.
      operationId: loginUser
      description: Logs a user into the system using their username and password.
      parameters:
        - name: username
          in: query
          description: The username of the user to log in.
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password of the user to log in.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token
                  user:
                    type: object
                    description: User details
        '400':
          description: Invalid username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
    '''
    logger.debug("Making GET request to /user/login")

    params = {}
    data = {}

    params["username"] = param_username
    params["password"] = param_password

    success, response = await make_api_request("/user/login", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response