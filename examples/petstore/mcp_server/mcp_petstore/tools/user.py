# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def create_user(
    body_id: int = None,
    body_username: str = None,
    body_firstName: str = None,
    body_lastName: str = None,
    body_email: str = None,
    body_password: str = None,
    body_phone: str = None,
    body_userStatus: int = None,
) -> Dict[str, Any]:
    '''
    Creates a new user in the system.

    This operation can only be performed by a logged-in user. The function sends a POST request to the '/user' endpoint with the provided user details.

    Args:
        body_id (int, optional): Unique identifier for the user. Defaults to None.
        body_username (str, optional): Username for the new user. Defaults to None.
        body_firstName (str, optional): First name of the user. Defaults to None.
        body_lastName (str, optional): Last name of the user. Defaults to None.
        body_email (str, optional): Email address of the user. Defaults to None.
        body_password (str, optional): Password for the user account. Defaults to None.
        body_phone (str, optional): Phone number of the user. Defaults to None.
        body_userStatus (int, optional): Status code representing the user's status. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the created user information or an error message.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /user")

    params = {}
    data = {}

    flat_body = {}
    if body_id is not None:
        flat_body["id"] = body_id
    if body_username is not None:
        flat_body["username"] = body_username
    if body_firstName is not None:
        flat_body["firstName"] = body_firstName
    if body_lastName is not None:
        flat_body["lastName"] = body_lastName
    if body_email is not None:
        flat_body["email"] = body_email
    if body_password is not None:
        flat_body["password"] = body_password
    if body_phone is not None:
        flat_body["phone"] = body_phone
    if body_userStatus is not None:
        flat_body["userStatus"] = body_userStatus
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/user", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response