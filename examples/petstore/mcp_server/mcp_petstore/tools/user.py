# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def create_user(
    body_id: int = None,
    body_username: str = None,
    body_first_name: str = None,
    body_last_name: str = None,
    body_email: str = None,
    body_password: str = None,
    body_phone: str = None,
    body_user_status: int = None,
) -> Dict[str, Any]:
    '''
    Creates a new user in the system.

    Args:
        body_id (int, optional): Unique identifier for the user. Defaults to None.
        body_username (str, optional): Username for the user. Defaults to None.
        body_first_name (str, optional): First name of the user. Defaults to None.
        body_last_name (str, optional): Last name of the user. Defaults to None.
        body_email (str, optional): Email address of the user. Defaults to None.
        body_password (str, optional): Password for the user account. Defaults to None.
        body_phone (str, optional): Phone number of the user. Defaults to None.
        body_user_status (int, optional): Status code representing the user's status. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing user creation result or error details.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
        ---
        post:
          summary: Create user
          description: This can only be done by the logged in user.
          operationId: createUser
          tags:
            - user
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Unique identifier for the user.
                    username:
                      type: string
                      description: Username for the user.
                    first_name:
                      type: string
                      description: First name of the user.
                    last_name:
                      type: string
                      description: Last name of the user.
                    email:
                      type: string
                      description: Email address of the user.
                    password:
                      type: string
                      description: Password for the user account.
                    phone:
                      type: string
                      description: Phone number of the user.
                    user_status:
                      type: integer
                      description: Status code representing the user's status.
          responses:
            '200':
              description: User created successfully.
              content:
                application/json:
                  schema:
                    type: object
            '400':
              description: Invalid input or request error.
              content:
                application/json:
                  schema:
                    type: object
    '''
    logger.debug("Making POST request to /user")

    params = {}
    data = {}

    if body_id:
        data["id"] = body_id
    if body_username:
        data["username"] = body_username
    if body_first_name:
        data["first_name"] = body_first_name
    if body_last_name:
        data["last_name"] = body_last_name
    if body_email:
        data["email"] = body_email
    if body_password:
        data["password"] = body_password
    if body_phone:
        data["phone"] = body_phone
    if body_user_status:
        data["user_status"] = body_user_status

    success, response = await make_api_request("/user", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response