
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for  operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def createuser(body_id: int = None, body_username: str = None, body_firstname: str = None, body_lastname: str = None, body_email: str = None, body_password: str = None, body_phone: str = None, body_userstatus: int = None) -> Dict[str, Any]:
    """
    Create user.

    OpenAPI Description:
        This can only be done by the logged in user.

    Args:body_id (int = None): OpenAPI parameter corresponding to 'body_id'.body_username (str = None): OpenAPI parameter corresponding to 'body_username'.body_firstname (str = None): OpenAPI parameter corresponding to 'body_firstname'.body_lastname (str = None): OpenAPI parameter corresponding to 'body_lastname'.body_email (str = None): OpenAPI parameter corresponding to 'body_email'.body_password (str = None): OpenAPI parameter corresponding to 'body_password'.body_phone (str = None): OpenAPI parameter corresponding to 'body_phone'.body_userstatus (int = None): OpenAPI parameter corresponding to 'body_userstatus'.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to ")
    params = {}
    
    if body_id is not None:
      params["body_id"] = body_id
    
    if body_username is not None:
      params["body_username"] = body_username
    
    if body_firstname is not None:
      params["body_firstname"] = body_firstname
    
    if body_lastname is not None:
      params["body_lastname"] = body_lastname
    
    if body_email is not None:
      params["body_email"] = body_email
    
    if body_password is not None:
      params["body_password"] = body_password
    
    if body_phone is not None:
      params["body_phone"] = body_phone
    
    if body_userstatus is not None:
      params["body_userstatus"] = body_userstatus
    
    data = None
    

    

    

    

    

    

    

    

    


    
    data = {}

    
    data["id"] = body_id
    

    
    data["username"] = body_username
    

    
    data["firstname"] = body_firstname
    

    
    data["lastname"] = body_lastname
    

    
    data["email"] = body_email
    

    
    data["password"] = body_password
    

    
    data["phone"] = body_phone
    

    
    data["userstatus"] = body_userstatus
    

    if not data:
        data = None
    success, response = await make_api_request(
        "/user",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

