# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def create_user(
    body_id: int = None,
    body_username: str = None,
    body_first_name: str = None,
    body_last_name: str = None,
    body_email: str = None,
    body_password: str = None,
    body_phone: str = None,
    body_user_status: int = None,
) -> Dict[str, Any]:
    '''
    Create a new user in the system.

    This function allows a logged-in user to create a new user by providing the necessary details. 
    All parameters are optional and can be provided to set the corresponding user attributes.

    Args:
        body_id (int, optional): The unique identifier for the user. Defaults to None.
        body_username (str, optional): The username for the user. Defaults to None.
        body_first_name (str, optional): The first name of the user. Defaults to None.
        body_last_name (str, optional): The last name of the user. Defaults to None.
        body_email (str, optional): The email address of the user. Defaults to None.
        body_password (str, optional): The password for the user account. Defaults to None.
        body_phone (str, optional): The phone number of the user. Defaults to None.
        body_user_status (int, optional): The status of the user (e.g., active, inactive). Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the user creation process.

    Raises:
        Exception: If the API request fails or returns an error, an exception is raised with the error details.
    '''
    logger.debug("Making POST request to /user")

    params = {}
    data = {}

    if body_id:
        data["id"] = body_id
    if body_username:
        data["username"] = body_username
    if body_first_name:
        data["first_name"] = body_first_name
    if body_last_name:
        data["last_name"] = body_last_name
    if body_email:
        data["email"] = body_email
    if body_password:
        data["password"] = body_password
    if body_phone:
        data["phone"] = body_phone
    if body_user_status:
        data["user_status"] = body_user_status

    success, response = await make_api_request("/user", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response