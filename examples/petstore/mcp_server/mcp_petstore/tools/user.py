
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def createuser() -> Dict[str, Any]:
    '''
    Creates a new user in the system.

    Args:
        None

    Returns:
        Dict[str, Any]: The response from the API containing user details if successful, or an error message.

    Raises:
        Exception: If the API request fails due to network issues or unexpected errors.

    OpenAPI Specification:
      post:
        summary: Create a new user
        description: Creates a new user in the system.
        operationId: createUser
        tags:
          - User
        requestBody:
          description: User creation payload (if required)
          required: false
          content:
            application/json:
              schema:
                type: object
        responses:
          '200':
            description: User created successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique identifier for the user
                    username:
                      type: string
                      description: Username of the created user
          '400':
            description: Invalid request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      description: Error message
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      description: Error message
    '''
    logger.debug("Making POST request to /user")
    params = {}
    data = None

    success, response = await make_api_request(
        "/user",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
