# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet/{petId}/uploadImage operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def upload_file(path_petId: int, param_additionalMetadata: str = None) -> Dict[str, Any]:
    '''
    Uploads an image for a specific pet.

    Args:
        path_petId (int): The ID of the pet to which the image will be uploaded.
        param_additionalMetadata (str, optional): Additional data to pass to the server. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing upload status and details.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
        ---
        post:
          summary: Uploads an image for a pet
          description: Upload image of the pet.
          operationId: uploadFile
          parameters:
            - name: petId
              in: path
              required: true
              description: ID of pet to update
              schema:
                type: integer
            - name: additionalMetadata
              in: query
              required: false
              description: Additional data to pass to server
              schema:
                type: string
          requestBody:
            content:
              multipart/form-data:
                schema:
                  type: object
                  properties:
                    file:
                      type: string
                      format: binary
          responses:
            '200':
              description: successful operation
              content:
                application/json:
                  schema:
                    type: object
            '400':
              description: Invalid input
    '''
    logger.debug("Making POST request to /pet/{petId}/uploadImage")

    params = {}
    data = {}

    params["additionalMetadata"] = param_additionalMetadata

    success, response = await make_api_request(
        f"/pet/{path_petId}/uploadImage", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response