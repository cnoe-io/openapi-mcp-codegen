# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet operations"""

import logging
from typing import Dict, Any, List
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def update_pet(
    body_name: str,
    body_photo_urls: List[str],
    body_id: int = None,
    body_category: Dict[str, Any] = None,
    body_tags: List[str] = None,
    body_status: str = None,
) -> Dict[str, Any]:
    '''
    Update an existing pet by Id.

    Args:
        body_name (str): The name of the pet.
        body_photo_urls (List[str]): List of photo URLs for the pet.
        body_id (int, optional): The unique identifier of the pet. Defaults to None.
        body_category (Dict[str, Any], optional): The category of the pet. Defaults to None.
        body_tags (List[str], optional): List of tags associated with the pet. Defaults to None.
        body_status (str, optional): The status of the pet in the store. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the updated pet information.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
        put:
          summary: Update an existing pet
          description: Update an existing pet by Id.
          operationId: updatePet
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The unique identifier of the pet.
                    name:
                      type: string
                      description: The name of the pet.
                    category:
                      type: object
                      description: The category of the pet.
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    photo_urls:
                      type: array
                      items:
                        type: string
                      description: List of photo URLs for the pet.
                    tags:
                      type: array
                      items:
                        type: string
                      description: List of tags associated with the pet.
                    status:
                      type: string
                      description: The status of the pet in the store.
          responses:
            '200':
              description: Successful operation
              content:
                application/json:
                  schema:
                    type: object
            '400':
              description: Invalid ID supplied
            '404':
              description: Pet not found
            '405':
              description: Validation exception
    '''
    logger.debug("Making PUT request to /pet")

    params = {}
    data = {}

    if body_name:
        data["name"] = body_name
    if body_photo_urls:
        data["photo_urls"] = body_photo_urls
    if body_id:
        data["id"] = body_id
    if body_category:
        data["category"] = body_category
    if body_tags:
        data["tags"] = body_tags
    if body_status:
        data["status"] = body_status

    success, response = await make_api_request("/pet", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def add_pet(
    body_name: str,
    body_photo_urls: List[str],
    body_id: int = None,
    body_category: Dict[str, Any] = None,
    body_tags: List[str] = None,
    body_status: str = None,
) -> Dict[str, Any]:
    '''
    Add a new pet to the store.

    Args:
        body_name (str): Name of the pet.
        body_photo_urls (List[str]): List of photo URLs for the pet.
        body_id (int, optional): Unique identifier for the pet. Defaults to None.
        body_category (Dict[str, Any], optional): Category object for the pet. Defaults to None.
        body_tags (List[str], optional): List of tags associated with the pet. Defaults to None.
        body_status (str, optional): Pet status in the store (e.g., 'available', 'pending', 'sold'). Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the created pet object or error details.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
        ---
        post:
          summary: Add a new pet to the store
          operationId: addPet
          tags:
            - pet
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: Unique identifier for the pet
                    name:
                      type: string
                      description: Name of the pet
                    category:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                        name:
                          type: string
                      description: Category object for the pet
                    photo_urls:
                      type: array
                      items:
                        type: string
                      description: List of photo URLs
                    tags:
                      type: array
                      items:
                        type: string
                      description: List of tags
                    status:
                      type: string
                      description: Pet status in the store
                      enum: [available, pending, sold]
                  required:
                    - name
                    - photo_urls
          responses:
            '200':
              description: Successful operation
              content:
                application/json:
                  schema:
                    type: object
            '400':
              description: Invalid input
    '''
    logger.debug("Making POST request to /pet")

    params = {}
    data = {}

    if body_name:
        data["name"] = body_name
    if body_photo_urls:
        data["photo_urls"] = body_photo_urls
    if body_id:
        data["id"] = body_id
    if body_category:
        data["category"] = body_category
    if body_tags:
        data["tags"] = body_tags
    if body_status:
        data["status"] = body_status

    success, response = await make_api_request("/pet", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response