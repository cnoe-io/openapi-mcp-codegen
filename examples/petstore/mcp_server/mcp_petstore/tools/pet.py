
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for  operations"""

import logging
from typing import Dict, Any, List
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def updatepet(body_name: str, body_photourls: List[str], body_id: int = None, body_category_id: int = None, body_category_name: str = None, body_tags: List[str] = None, body_status: str = None) -> Dict[str, Any]:
    """
    Update an existing pet.

    OpenAPI Description:
        Update an existing pet by Id.

    Args:body_name (str): OpenAPI parameter corresponding to 'body_name'.body_photourls (List[str]): OpenAPI parameter corresponding to 'body_photourls'.body_id (int = None): OpenAPI parameter corresponding to 'body_id'.body_category_id (int = None): OpenAPI parameter corresponding to 'body_category_id'.body_category_name (str = None): OpenAPI parameter corresponding to 'body_category_name'.body_tags (List[str] = None): OpenAPI parameter corresponding to 'body_tags'.body_status (str = None): OpenAPI parameter corresponding to 'body_status'.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making PUT request to ")
    params = {}
    
    if body_name is not None:
      params["body_name"] = body_name
    
    if body_photourls is not None:
      params["body_photourls"] = body_photourls
    
    if body_id is not None:
      params["body_id"] = body_id
    
    if body_category_id is not None:
      params["body_category_id"] = body_category_id
    
    if body_category_name is not None:
      params["body_category_name"] = body_category_name
    
    if body_tags is not None:
      params["body_tags"] = body_tags
    
    if body_status is not None:
      params["body_status"] = body_status
    
    data = None
    

    

    

    

    

    

    

    


    
    data = {}

    
    data["name"] = body_name
    

    
    data["photourls"] = body_photourls
    

    
    data["id"] = body_id
    

    
    data["category_id"] = body_category_id
    

    
    data["category_name"] = body_category_name
    

    
    data["tags"] = body_tags
    

    
    data["status"] = body_status
    

    if not data:
        data = None
    success, response = await make_api_request(
        "/pet",
        method="PUT",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def addpet(body_name: str, body_photourls: List[str], body_id: int = None, body_category_id: int = None, body_category_name: str = None, body_tags: List[str] = None, body_status: str = None) -> Dict[str, Any]:
    """
    Add a new pet to the store.

    OpenAPI Description:
        Add a new pet to the store.

    Args:body_name (str): OpenAPI parameter corresponding to 'body_name'.body_photourls (List[str]): OpenAPI parameter corresponding to 'body_photourls'.body_id (int = None): OpenAPI parameter corresponding to 'body_id'.body_category_id (int = None): OpenAPI parameter corresponding to 'body_category_id'.body_category_name (str = None): OpenAPI parameter corresponding to 'body_category_name'.body_tags (List[str] = None): OpenAPI parameter corresponding to 'body_tags'.body_status (str = None): OpenAPI parameter corresponding to 'body_status'.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to ")
    params = {}
    
    if body_name is not None:
      params["body_name"] = body_name
    
    if body_photourls is not None:
      params["body_photourls"] = body_photourls
    
    if body_id is not None:
      params["body_id"] = body_id
    
    if body_category_id is not None:
      params["body_category_id"] = body_category_id
    
    if body_category_name is not None:
      params["body_category_name"] = body_category_name
    
    if body_tags is not None:
      params["body_tags"] = body_tags
    
    if body_status is not None:
      params["body_status"] = body_status
    
    data = None
    

    

    

    

    

    

    

    


    
    data = {}

    
    data["name"] = body_name
    

    
    data["photourls"] = body_photourls
    

    
    data["id"] = body_id
    

    
    data["category_id"] = body_category_id
    

    
    data["category_name"] = body_category_name
    

    
    data["tags"] = body_tags
    

    
    data["status"] = body_status
    

    if not data:
        data = None
    success, response = await make_api_request(
        "/pet",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

