# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet operations"""

import logging
from typing import Dict, Any, List
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def update_pet(
    body_name: str,
    body_photo_urls: List[str],
    body_id: int = None,
    body_category_id: int = None,
    body_category_name: str = None,
    body_tags: List[str] = None,
    body_status: str = None,
) -> Dict[str, Any]:
    """
    Update an existing pet.

    OpenAPI Description:
        Update an existing pet by Id.

    Args:
    body_name (str): OpenAPI parameter corresponding to 'body_name'.
    body_photo_urls (List[str]): OpenAPI parameter corresponding to 'body_photo_urls'.
    body_id (int = None): OpenAPI parameter corresponding to 'body_id'.
    body_category_id (int = None): OpenAPI parameter corresponding to 'body_category_id'.
    body_category_name (str = None): OpenAPI parameter corresponding to 'body_category_name'.
    body_tags (List[str] = None): OpenAPI parameter corresponding to 'body_tags'.
    body_status (str = None): OpenAPI parameter corresponding to 'body_status'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making PUT request to /pet")

    params = {}
    data = {}

    if body_name:
        data["name"] = body_name
    if body_photo_urls:
        data["photo_urls"] = body_photo_urls
    if body_id:
        data["id"] = body_id
    if body_category_id:
        data["category_id"] = body_category_id
    if body_category_name:
        data["category_name"] = body_category_name
    if body_tags:
        data["tags"] = body_tags
    if body_status:
        data["status"] = body_status

    success, response = await make_api_request("/pet", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def add_pet(
    body_name: str,
    body_photo_urls: List[str],
    body_id: int = None,
    body_category_id: int = None,
    body_category_name: str = None,
    body_tags: List[str] = None,
    body_status: str = None,
) -> Dict[str, Any]:
    """
    Add a new pet to the store.

    OpenAPI Description:
        Add a new pet to the store.

    Args:
    body_name (str): OpenAPI parameter corresponding to 'body_name'.
    body_photo_urls (List[str]): OpenAPI parameter corresponding to 'body_photo_urls'.
    body_id (int = None): OpenAPI parameter corresponding to 'body_id'.
    body_category_id (int = None): OpenAPI parameter corresponding to 'body_category_id'.
    body_category_name (str = None): OpenAPI parameter corresponding to 'body_category_name'.
    body_tags (List[str] = None): OpenAPI parameter corresponding to 'body_tags'.
    body_status (str = None): OpenAPI parameter corresponding to 'body_status'.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to /pet")

    params = {}
    data = {}

    if body_name:
        data["name"] = body_name
    if body_photo_urls:
        data["photo_urls"] = body_photo_urls
    if body_id:
        data["id"] = body_id
    if body_category_id:
        data["category_id"] = body_category_id
    if body_category_name:
        data["category_name"] = body_category_name
    if body_tags:
        data["tags"] = body_tags
    if body_status:
        data["status"] = body_status

    success, response = await make_api_request("/pet", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
