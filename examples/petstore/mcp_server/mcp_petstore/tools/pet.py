# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet operations"""

import logging
from typing import Dict, Any, List
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def update_pet(
    body_name: str,
    body_photo_urls: List[str],
    body_id: int = None,
    body_category: Dict[str, Any] = None,
    body_tags: List[str] = None,
    body_status: str = None,
) -> Dict[str, Any]:
    '''
    Update an existing pet by Id.

    Args:
        body_name (str): The name of the pet to update.
        body_photo_urls (List[str]): A list of photo URLs associated with the pet.
        body_id (int, optional): The unique identifier of the pet. Defaults to None.
        body_category (Dict[str, Any], optional): The category information for the pet. Defaults to None.
        body_tags (List[str], optional): A list of tags associated with the pet. Defaults to None.
        body_status (str, optional): The status of the pet (e.g., 'available', 'pending', 'sold'). Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the updated pet information or an error message.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making PUT request to /pet")

    params = {}
    data = {}

    if body_name:
        data["name"] = body_name
    if body_photo_urls:
        data["photo_urls"] = body_photo_urls
    if body_id:
        data["id"] = body_id
    if body_category:
        data["category"] = body_category
    if body_tags:
        data["tags"] = body_tags
    if body_status:
        data["status"] = body_status

    success, response = await make_api_request("/pet", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def add_pet(
    body_name: str,
    body_photo_urls: List[str],
    body_id: int = None,
    body_category: Dict[str, Any] = None,
    body_tags: List[str] = None,
    body_status: str = None,
) -> Dict[str, Any]:
    '''
    Add a new pet to the store.

    Args:
        body_name (str): The name of the pet to add.
        body_photo_urls (List[str]): A list of photo URLs associated with the pet.
        body_id (int, optional): The unique identifier for the pet. Defaults to None.
        body_category (Dict[str, Any], optional): The category information for the pet. Defaults to None.
        body_tags (List[str], optional): A list of tags associated with the pet. Defaults to None.
        body_status (str, optional): The status of the pet in the store (e.g., 'available', 'pending', 'sold'). Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the details of the added pet or an error message.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /pet")

    params = {}
    data = {}

    if body_name:
        data["name"] = body_name
    if body_photo_urls:
        data["photo_urls"] = body_photo_urls
    if body_id:
        data["id"] = body_id
    if body_category:
        data["category"] = body_category
    if body_tags:
        data["tags"] = body_tags
    if body_status:
        data["status"] = body_status

    success, response = await make_api_request("/pet", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response