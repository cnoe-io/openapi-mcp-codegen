# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user/{username} operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_user_by_name(path_username: str) -> Dict[str, Any]:
    '''
    Retrieves user details based on the provided username.

    Args:
        path_username (str): The username of the user whose details are to be retrieved.

    Returns:
        Dict[str, Any]: A dictionary containing the user's details as returned by the API. If the request fails, returns a dictionary with an 'error' key describing the failure.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /user/{username}")

    params = {}
    data = {}

    success, response = await make_api_request(f"/user/{path_username}", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def update_user(
    path_username: str,
    body_id: int = None,
    body_username: str = None,
    body_first_name: str = None,
    body_last_name: str = None,
    body_email: str = None,
    body_password: str = None,
    body_phone: str = None,
    body_user_status: int = None,
) -> Dict[str, Any]:
    '''
    Update an existing user resource.

    This operation updates the details of a user identified by the provided username. Only the currently authenticated user is permitted to perform this action. Fields that are not provided will remain unchanged.

    Args:
        path_username (str): The username of the user to update.
        body_id (int, optional): The unique identifier of the user. Defaults to None.
        body_username (str, optional): The new username for the user. Defaults to None.
        body_first_name (str, optional): The new first name of the user. Defaults to None.
        body_last_name (str, optional): The new last name of the user. Defaults to None.
        body_email (str, optional): The new email address of the user. Defaults to None.
        body_password (str, optional): The new password for the user. Defaults to None.
        body_phone (str, optional): The new phone number of the user. Defaults to None.
        body_user_status (int, optional): The new status code for the user. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the updated user information or an error message.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making PUT request to /user/{username}")

    params = {}
    data = {}

    if body_id:
        data["id"] = body_id
    if body_username:
        data["username"] = body_username
    if body_first_name:
        data["first_name"] = body_first_name
    if body_last_name:
        data["last_name"] = body_last_name
    if body_email:
        data["email"] = body_email
    if body_password:
        data["password"] = body_password
    if body_phone:
        data["phone"] = body_phone
    if body_user_status:
        data["user_status"] = body_user_status

    success, response = await make_api_request(f"/user/{path_username}", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def delete_user(path_username: str) -> Dict[str, Any]:
    '''
    Deletes a user resource identified by the given username.

    This operation can only be performed by the currently logged-in user.

    Args:
        path_username (str): The username of the user to be deleted.

    Returns:
        Dict[str, Any]: The JSON response from the API call indicating the result of the delete operation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making DELETE request to /user/{username}")

    params = {}
    data = {}

    success, response = await make_api_request(f"/user/{path_username}", method="DELETE", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response