
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user/{username} operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def getuserbyname(path_username: str) -> Dict[str, Any]:
    '''
    Retrieve user details by username.

    Args:
        path_username (str): The username of the user to retrieve.

    Returns:
        Dict[str, Any]: The JSON response containing user details.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Get user by user name
        description: Retrieve user details based on the provided username.
        operationId: getUserByName
        parameters:
          - name: username
            in: path
            required: true
            description: The username of the user to retrieve.
            schema:
              type: string
        responses:
          '200':
            description: Successful response with user details.
            content:
              application/json:
                schema:
                  type: object
          '404':
            description: User not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
    '''
    logger.debug("Making GET request to /user/{username}")
    params = {}
    data = None
    

    


    
    data = {}

    

    if not data:
        data = None
    success, response = await make_api_request(
        f"/user/{path_username}",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def updateuser(path_username: str, body_id: int = None, body_username: str = None, body_firstName: str = None, body_lastName: str = None, body_email: str = None, body_password: str = None, body_phone: str = None, body_userStatus: int = None) -> Dict[str, Any]:
    '''
    Update an existing user resource.

    This operation updates the details of a user identified by their username. Only the currently authenticated user can perform this action. All fields in the request body are optional and will update the corresponding user attributes if provided.

    Args:
        path_username (str): The username of the user to update.
        body_id (int, optional): The unique identifier of the user. Defaults to None.
        body_username (str, optional): The new username for the user. Defaults to None.
        body_firstName (str, optional): The user's first name. Defaults to None.
        body_lastName (str, optional): The user's last name. Defaults to None.
        body_email (str, optional): The user's email address. Defaults to None.
        body_password (str, optional): The user's password. Defaults to None.
        body_phone (str, optional): The user's phone number. Defaults to None.
        body_userStatus (int, optional): The user's status code. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the updated user information or an error message.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
        put:
          summary: Update an existing user
          description: This can only be done by the logged in user.
          operationId: updateUser
          tags:
            - user
          parameters:
            - name: username
              in: path
              required: true
              description: The name of the user to update
              schema:
                type: string
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    username:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
                    phone:
                      type: string
                    userStatus:
                      type: integer
                      format: int32
          responses:
            '200':
              description: User updated successfully
              content:
                application/json:
                  schema:
                    type: object
            '400':
              description: Invalid user supplied
            '404':
              description: User not found
    '''
    logger.debug("Making PUT request to /user/{username}")
    params = {}
    data = None
    

    

    

    

    

    

    

    

    

    


    
    data = {}

    

    
    data["id"] = body_id
    

    
    data["username"] = body_username
    

    
    data["firstName"] = body_firstName
    

    
    data["lastName"] = body_lastName
    

    
    data["email"] = body_email
    

    
    data["password"] = body_password
    

    
    data["phone"] = body_phone
    

    
    data["userStatus"] = body_userStatus
    

    if not data:
        data = None
    success, response = await make_api_request(
        f"/user/{path_username}",
        method="PUT",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def deleteuser(path_username: str) -> Dict[str, Any]:
    '''
    Deletes a user resource by username.

    Args:
        path_username (str): The username of the user to be deleted.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
        delete:
          summary: Delete user resource
          description: This can only be done by the logged in user.
          operationId: deleteUser
          parameters:
            - name: username
              in: path
              description: The name of the user to delete
              required: true
              schema:
                type: string
          responses:
            '200':
              description: User deleted successfully
              content:
                application/json:
                  schema:
                    type: object
            '400':
              description: Invalid username supplied
            '404':
              description: User not found
            '401':
              description: Unauthorized
          security:
            - api_key: []
    '''
    logger.debug("Making DELETE request to /user/{username}")
    params = {}
    data = None
    

    


    
    data = {}

    

    if not data:
        data = None
    success, response = await make_api_request(
        f"/user/{path_username}",
        method="DELETE",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
