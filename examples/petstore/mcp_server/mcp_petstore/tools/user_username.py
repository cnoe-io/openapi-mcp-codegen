# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user/{username} operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_user_by_name(path_username: str) -> Dict[str, Any]:
    '''
    Retrieves user details based on the provided username.

    Args:
        path_username (str): The username of the user to fetch. Use 'user1' for testing.

    Returns:
        Dict[str, Any]: The JSON response containing user details from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /user/{username}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/user/{path_username}", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def update_user(
    path_username: str,
    body_id: int = None,
    body_username: str = None,
    body_firstName: str = None,
    body_lastName: str = None,
    body_email: str = None,
    body_password: str = None,
    body_phone: str = None,
    body_userStatus: int = None,
) -> Dict[str, Any]:
    '''
    Update a user resource with new information.

    This operation updates the details of an existing user. Only the currently logged-in user is authorized to perform this action.

    Args:
        path_username (str): The username of the user to update.
        body_id (int, optional): The unique identifier for the user. Defaults to None.
        body_username (str, optional): The new username for the user. Defaults to None.
        body_firstName (str, optional): The new first name of the user. Defaults to None.
        body_lastName (str, optional): The new last name of the user. Defaults to None.
        body_email (str, optional): The new email address of the user. Defaults to None.
        body_password (str, optional): The new password for the user. Defaults to None.
        body_phone (str, optional): The new phone number of the user. Defaults to None.
        body_userStatus (int, optional): The new status code for the user. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the updated user information or an error message.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making PUT request to /user/{username}")

    params = {}
    data = {}

    flat_body = {}
    if body_id is not None:
        flat_body["id"] = body_id
    if body_username is not None:
        flat_body["username"] = body_username
    if body_firstName is not None:
        flat_body["firstName"] = body_firstName
    if body_lastName is not None:
        flat_body["lastName"] = body_lastName
    if body_email is not None:
        flat_body["email"] = body_email
    if body_password is not None:
        flat_body["password"] = body_password
    if body_phone is not None:
        flat_body["phone"] = body_phone
    if body_userStatus is not None:
        flat_body["userStatus"] = body_userStatus
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/user/{path_username}", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def delete_user(path_username: str) -> Dict[str, Any]:
    '''
    Deletes a user resource by username.

    This operation can only be performed by the currently authenticated user.

    Args:
        path_username (str): The username of the user to be deleted.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the delete operation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making DELETE request to /user/{username}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/user/{path_username}", method="DELETE", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response