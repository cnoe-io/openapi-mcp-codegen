
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user/{username} operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def getuserbyname(path_username: str) -> Dict[str, Any]:
    """
    Get user by user name. Get user detail based on username.
    Args:
        path_username (str): The name that needs to be fetched. Use user1 for testing

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /user/{username}")
    params = {}
    data = {}
    if not data:
        data = None
    success, response = await make_api_request(
        f"/user/{path_username}",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def updateuser(path_username: str, body_id: int = None, body_username: str = None, body_firstname: str = None, body_lastname: str = None, body_email: str = None, body_password: str = None, body_phone: str = None, body_userstatus: int = None) -> Dict[str, Any]:
    """
    Update user resource. This can only be done by the logged in user.
    Args:
        path_username (str): name that need to be deleted
        body_id (int): Optional body parameter 'id'
        body_username (str): Optional body parameter 'username'
        body_firstname (str): Optional body parameter 'firstName'
        body_lastname (str): Optional body parameter 'lastName'
        body_email (str): Optional body parameter 'email'
        body_password (str): Optional body parameter 'password'
        body_phone (str): Optional body parameter 'phone'
        body_userstatus (int): User Status

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making PUT request to /user/{username}")
    params = {}
    data = {}
    data["id"] = body_id
    data["username"] = body_username
    data["firstname"] = body_firstname
    data["lastname"] = body_lastname
    data["email"] = body_email
    data["password"] = body_password
    data["phone"] = body_phone
    data["userstatus"] = body_userstatus
    if not data:
        data = None
    success, response = await make_api_request(
        f"/user/{path_username}",
        method="PUT",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def deleteuser(path_username: str) -> Dict[str, Any]:
    """
    Delete user resource. This can only be done by the logged in user.
    Args:
        path_username (str): The name that needs to be deleted

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making DELETE request to /user/{username}")
    params = {}
    data = {}
    if not data:
        data = None
    success, response = await make_api_request(
        f"/user/{path_username}",
        method="DELETE",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

