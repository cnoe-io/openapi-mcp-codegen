
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet/findbytags operations"""

import logging
from typing import Dict, Any, List
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


<<<<<<< Updated upstream
async def findpetsbytags(tags: List[str] = None) -> Dict[str, Any]:
    '''
    Finds Pets by tags.

    Args:
        tags (List[str], optional): List of tags to filter pets by. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing the list of pets matching the provided tags or an error message.

    Raises:
        Exception: If the API request fails or returns an unexpected response.

    OpenAPI Specification:
      get:
        summary: Finds Pets by tags
        description: Returns a list of pets that match the provided tags.
        operationId: findPetsByTags
        parameters:
          - name: tags
            in: query
            description: Tags to filter by
            required: false
            schema:
              type: array
              items:
                type: string
            style: form
            explode: true
        responses:
          '200':
            description: A list of pets matching the tags
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Pet'
          '400':
            description: Invalid tag value
          '500':
            description: Internal server error
    '''
=======
async def findpetsbytags(param_tags: List[str] = None) -> Dict[str, Any]:
    """
    Finds Pets by tags. Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
    Args:
        param_tags (List[str]): Tags to filter by

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
>>>>>>> Stashed changes
    logger.debug("Making GET request to /pet/findbytags")
    params = {}
    
    if tags is not None:
      params["tags"] = tags
    
    data = None

    success, response = await make_api_request(
        "/pet/findbytags",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

