# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet/{petId}/uploadImage operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def upload_file(path_petId: int, param_additionalMetadata: str = None) -> Dict[str, Any]:
    '''
    Uploads an image for a specified pet.

    Args:
        path_petId (int): ID of the pet to update.
        param_additionalMetadata (str, optional): Additional metadata to associate with the image. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the result of the upload operation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /pet/{petId}/uploadImage")

    params = {}
    data = {}

    if param_additionalMetadata is not None:
        params["additionalMetadata"] = (
            str(param_additionalMetadata).lower()
            if isinstance(param_additionalMetadata, bool)
            else param_additionalMetadata
        )

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/pet/{path_petId}/uploadImage", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response