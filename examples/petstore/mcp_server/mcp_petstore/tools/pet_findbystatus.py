# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet/findByStatus operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def find_pets_by_status(param_status: str = None) -> Dict[str, Any]:
    '''
    Finds pets by their status.

    Multiple status values can be provided as a comma-separated string.

    Args:
        param_status (str, optional): Status values to filter pets by (e.g., "available,pending,sold"). Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the list of pets matching the provided status values.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /pet/findByStatus")

    params = {}
    data = {}

    if param_status is not None:
        params["status"] = str(param_status).lower() if isinstance(param_status, bool) else param_status

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/pet/findByStatus", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response