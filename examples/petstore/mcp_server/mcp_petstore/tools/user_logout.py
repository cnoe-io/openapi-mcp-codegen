# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /user/logout operations"""

import logging
from typing import Dict, Any
from mcp_petstore.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def logout_user() -> Dict[str, Any]:
    '''
    Logs out the currently logged-in user session.

    Args:
        None

    Returns:
        Dict[str, Any]: The JSON response from the API call indicating the result of the logout operation.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      summary: Log out current user
      description: Log the currently authenticated user out of the system and invalidate their session.
      operationId: logoutUser
      tags:
        - user
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out.
        '401':
          description: Unauthorized - user is not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Not authenticated.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error.
    '''
    logger.debug("Making GET request to /user/logout")

    params = {}
    data = {}

    success, response = await make_api_request("/user/logout", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response